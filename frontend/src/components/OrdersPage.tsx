import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Grid,
  CircularProgress,
  LinearProgress,
  CardActions,
  Stack,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField
} from '@mui/material';
import {
  Add as AddIcon,
  CalendarToday,
  AttachFile,
  FileDownload,
  Edit as EditIcon
} from '@mui/icons-material';
import { Order, OrderStatus } from '../types';
import { getOrders, downloadFile, downloadAllFiles, api, requestOrderRevision } from '../api';
import { format, differenceInDays } from 'date-fns';
import { ru } from 'date-fns/locale';

const statusConfig = {
  [OrderStatus.NEW]: { 
    color: 'info' as const, 
    label: '–ù–æ–≤—ã–π', 
    icon: 'üÜï',
    progress: 10
  },
  [OrderStatus.WAITING_PAYMENT]: { 
    color: 'warning' as const, 
    label: '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã', 
    icon: 'üí∞',
    progress: 20
  },
  [OrderStatus.PAID]: { 
    color: 'primary' as const, 
    label: '–û–ø–ª–∞—á–µ–Ω', 
    icon: 'üí≥',
    progress: 40
  },
  [OrderStatus.IN_PROGRESS]: { 
    color: 'secondary' as const, 
    label: '–í —Ä–∞–±–æ—Ç–µ', 
    icon: '‚öôÔ∏è',
    progress: 70
  },
  [OrderStatus.COMPLETED]: { 
    color: 'success' as const, 
    label: '–í—ã–ø–æ–ª–Ω–µ–Ω', 
    icon: '‚úÖ',
    progress: 100
  },
  [OrderStatus.NEEDS_REVISION]: { 
    color: 'error' as const, 
    label: '–ù—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 
    icon: 'üîÑ',
    progress: 80
  },

};

const OrdersPage: React.FC = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [downloadingFiles, setDownloadingFiles] = useState<Set<string>>(new Set());
  const [paymentNotifications, setPaymentNotifications] = useState<Set<number>>(new Set());
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  const [revisionDialogOpen, setRevisionDialogOpen] = useState(false);
  const [selectedOrderForRevision, setSelectedOrderForRevision] = useState<Order | null>(null);
  const [revisionComment, setRevisionComment] = useState('');
  const [revisionGrade, setRevisionGrade] = useState('');
  const [submittingRevision, setSubmittingRevision] = useState(false);

  useEffect(() => {
    loadOrders();
  }, []);

  const loadOrders = async () => {
    try {
      setLoading(true);
      const response = await getOrders(1, 50); // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤
      setOrders(response.orders);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };



  const handleDownloadFile = async (orderId: number, filename: string) => {
    const downloadKey = `${orderId}-${filename}`;
    
    try {
      setDownloadingFiles(prev => new Set(prev).add(downloadKey));
      await downloadFile(orderId, filename);
      console.log(`‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: ${filename} –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setDownloadingFiles(prev => {
        const newSet = new Set(prev);
        newSet.delete(downloadKey);
        return newSet;
      });
    }
  };

  const handleDownloadAllFiles = async (orderId: number) => {
    const downloadKey = `${orderId}-all`;
    
    try {
      setDownloadingFiles(prev => new Set(prev).add(downloadKey));
      await downloadAllFiles(orderId);
      console.log(`‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∫–∞—á–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤:', error);
      alert('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setDownloadingFiles(prev => {
        const newSet = new Set(prev);
        newSet.delete(downloadKey);
        return newSet;
      });
    }
  };

  const handlePaymentNotification = async (orderId: number) => {
    try {
      const response = await api.post(`/api/orders/${orderId}/payment-notification`);
      if (response.status === 200) {
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
        // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        setPaymentNotifications(prev => new Set(prev).add(orderId));
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        alert('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const handleRequestRevision = (order: Order) => {
    setSelectedOrderForRevision(order);
    setRevisionComment('');
    setRevisionGrade('');
    setRevisionDialogOpen(true);
  };

  const handleSubmitRevision = async () => {
    if (!selectedOrderForRevision || !selectedOrderForRevision.id || !revisionComment.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º');
      return;
    }

    try {
      setSubmittingRevision(true);
      const updatedOrder = await requestOrderRevision(
        selectedOrderForRevision.id,
        revisionComment.trim(),
        revisionGrade.trim() || undefined
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ
      setOrders(prev => prev.map(order => 
        order.id === updatedOrder.id ? updatedOrder : order
      ));
      
      setRevisionDialogOpen(false);
      setSelectedOrderForRevision(null);
      setRevisionComment('');
      setRevisionGrade('');
      
      alert('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #${selectedOrderForRevision.id}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setSubmittingRevision(false);
    }
  };

  const handleCloseRevisionDialog = () => {
    setRevisionDialogOpen(false);
    setSelectedOrderForRevision(null);
    setRevisionComment('');
    setRevisionGrade('');
  };

  const getDeadlineStatus = (deadline: string) => {
    const deadlineDate = new Date(deadline);
    const today = new Date();
    const daysLeft = differenceInDays(deadlineDate, today);
    
    if (daysLeft < 0) {
      return { type: 'overdue', text: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω', color: 'error' };
    } else if (daysLeft === 0) {
      return { type: 'today', text: '–°–µ–≥–æ–¥–Ω—è', color: 'warning' };
    } else if (daysLeft <= 3) {
      return { type: 'urgent', text: `${daysLeft} –¥–Ω.`, color: 'warning' };
    } else {
      return { type: 'normal', text: `${daysLeft} –¥–Ω.`, color: 'default' };
    }
  };

  const getOrdersByStatus = () => {
    const grouped = orders.reduce((acc, order) => {
      const status = order.status;
      if (!acc[status]) acc[status] = [];
      acc[status].push(order);
      return acc;
    }, {} as Record<string, Order[]>);
    return grouped;
  };

  const ordersByStatus = getOrdersByStatus();
  const statsData = Object.entries(statusConfig).map(([status, config]) => ({
    status,
    config,
    count: ordersByStatus[status]?.length || 0
  }));

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
        <CircularProgress size={60} />
      </Box>
    );
  }

  return (
    <Box sx={{ maxWidth: 1400, mx: 'auto', p: 2 }}>
      {/* Header */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={4}>
        <Box>
          <Typography variant="h3" component="h1" sx={{ fontWeight: 700, mb: 1 }}>
            üìö –ú–æ–∏ –∑–∞–∫–∞–∑—ã
          </Typography>
          <Typography variant="subtitle1" color="text.secondary">
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏
          </Typography>
        </Box>
        
        <Box display="flex" gap={2} alignItems="center">
          <Button
            component={Link}
            to="/create"
            variant="contained"
            size="large"
            startIcon={<AddIcon />}
            sx={{ borderRadius: 3, px: 3 }}
          >
            –ù–æ–≤—ã–π –∑–∞–∫–∞–∑
          </Button>
        </Box>
      </Box>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {orders.length > 0 && (
        <Grid container spacing={2} mb={4}>
          {statsData.map(({ status, config, count }) => (
            <Grid item xs={6} sm={4} md={2.4} key={status}>
              <Card sx={{ textAlign: 'center', bgcolor: count > 0 ? `${config.color}.50` : 'grey.50' }}>
                <CardContent sx={{ py: 2 }}>
                  <Typography variant="h4" sx={{ mb: 1 }}>
                    {config.icon}
                  </Typography>
                  <Typography variant="h5" sx={{ fontWeight: 600 }}>
                    {count}
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    {config.label}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* –ë–ª–æ–∫ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏ */}
      <Card sx={{ mb: 4, bgcolor: 'primary.50', border: '1px solid', borderColor: 'primary.200' }}>
        <CardContent>
          <Box display="flex" alignItems="center" gap={2}>
            <Box sx={{ 
              width: 48, 
              height: 48, 
              borderRadius: '50%', 
              bgcolor: 'primary.main', 
              display: 'flex', 
              alignItems: 'center', 
              justifyContent: 'center' 
            }}>
              <Typography variant="h6" color="white">üí¨</Typography>
            </Box>
            <Box flexGrow={1}>
              <Typography variant="h6" sx={{ fontWeight: 600, mb: 0.5 }}>
                –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
              </Typography>
              <Typography variant="body2" color="text.secondary">
                –ü–æ —Å–ª–æ–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –≤ Telegram: <strong>@artemonnnnnnn</strong>
              </Typography>
            </Box>
            <Button
              variant="outlined"
              size="small"
              href="https://t.me/artemonnnnnnn"
              target="_blank"
              sx={{ borderRadius: 2 }}
            >
              –ù–∞–ø–∏—Å–∞—Ç—å
            </Button>
          </Box>
        </CardContent>
      </Card>

      {/* –ó–∞–∫–∞–∑—ã */}
      {orders.length === 0 ? (
        <Card sx={{ textAlign: 'center', py: 8 }}>
          <CardContent>
            <Typography variant="h1" sx={{ fontSize: 80, mb: 2 }}>
              üìù
            </Typography>
            <Typography variant="h5" gutterBottom sx={{ fontWeight: 600 }}>
              –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤
            </Typography>
            <Typography variant="body1" color="text.secondary" sx={{ mb: 4 }}>
              –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
            </Typography>
            <Button
              component={Link}
              to="/create"
              variant="contained"
              size="large"
              startIcon={<AddIcon />}
              sx={{ borderRadius: 3, px: 4, py: 1.5 }}
            >
              –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
            </Button>
          </CardContent>
        </Card>
      ) : (
        <Grid container spacing={3}>
          {orders.map((order) => {
            const statusInfo = statusConfig[order.status as OrderStatus];
            const deadlineStatus = getDeadlineStatus(order.deadline);
            
            return (
              <Grid item xs={12} sm={6} lg={4} key={order.id}>
                <Card 
                  sx={{ 
                    height: '100%',
                    display: 'flex',
                    flexDirection: 'column',
                    transition: 'all 0.3s ease',
                    '&:hover': { 
                      transform: 'translateY(-4px)',
                      boxShadow: 4
                    }
                  }}
                >
                  <CardContent sx={{ flexGrow: 1 }}>
                    {/* Header */}
                    <Box display="flex" justifyContent="space-between" alignItems="start" mb={2}>
                      <Box flexGrow={1}>
                        <Typography 
                          variant="h6" 
                          component="h2" 
                          sx={{ 
                            fontWeight: 600,
                            lineHeight: 1.3,
                            mb: 0.5
                          }}
                        >
                          {order.title}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          {order.subject?.name}
                        </Typography>
                      </Box>
                    </Box>

                    {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                    <Box mb={2}>
                      <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
                        <Chip 
                          label={statusInfo.label}
                          color={statusInfo.color}
                          size="small"
                          sx={{ fontWeight: 600 }}
                        />
                        <Typography variant="body2" color="text.secondary">
                          {statusInfo.progress}%
                        </Typography>
                      </Box>
                      <LinearProgress 
                        variant="determinate" 
                        value={statusInfo.progress} 
                        color={statusInfo.color}
                        sx={{ borderRadius: 1, height: 6 }}
                      />
                    </Box>

                    {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                    <Typography 
                      variant="body2" 
                      color="text.secondary" 
                      sx={{ 
                        mb: 2,
                        display: '-webkit-box',
                        WebkitLineClamp: 2,
                        WebkitBoxOrient: 'vertical',
                        overflow: 'hidden'
                      }}
                    >
                      {order.description}
                    </Typography>

                    {/* –î–µ—Ç–∞–ª–∏ */}
                    <Stack spacing={1} mb={2}>
                      <Box display="flex" alignItems="center" gap={1}>
                        <CalendarToday sx={{ fontSize: 16, color: deadlineStatus.color === 'error' ? 'error.main' : 'text.secondary' }} />
                        <Typography 
                          variant="body2" 
                          color={deadlineStatus.color === 'error' ? 'error.main' : 'text.secondary'}
                          sx={{ fontWeight: deadlineStatus.type === 'urgent' ? 600 : 400 }}
                        >
                          {format(new Date(order.deadline), 'dd MMM yyyy', { locale: ru })} 
                          ({deadlineStatus.text})
                        </Typography>
                      </Box>

                      {order.created_at && (
                        <Typography variant="body2" color="text.secondary">
                          –°–æ–∑–¥–∞–Ω: {format(new Date(order.created_at), 'dd.MM.yyyy', { locale: ru })}
                        </Typography>
                      )}

                      {/* –ë–ª–æ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã" */}
                      {order.status === OrderStatus.WAITING_PAYMENT && (
                        <Card sx={{ mt: 2, bgcolor: 'warning.50', border: '1px solid', borderColor: 'warning.300' }}>
                          <CardContent sx={{ py: 2 }}>
                            <Typography variant="h6" sx={{ fontWeight: 600, mb: 1, color: 'warning.dark' }}>
                              üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
                            </Typography>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                              <strong>–ö–∞—Ä—Ç–∞ –¢–±–∞–Ω–∫:</strong> +79621206360
                            </Typography>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                              <strong>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</strong> –¢–∞—Ä–∞–Ω–æ–≤ –ê. –ò. 
                            </Typography>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                              <strong>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</strong> {order.actual_price || order.subject?.price} ‚ÇΩ
                            </Typography>
                            <Box display="flex" alignItems="center" mt={2}>
                              {paymentNotifications.has(order.id!) ? (
                                <Box display="flex" alignItems="center" sx={{ color: 'success.main' }}>
                                  <span style={{ marginRight: 8 }}>‚úÖ</span>
                                  <Typography variant="body2" sx={{ fontSize: '0.875rem', fontWeight: 600 }}>
                                    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                                  </Typography>
                                </Box>
                              ) : (
                                <>
                                  <input 
                                    type="checkbox" 
                                    id={`payment-${order.id}`}
                                    onChange={(e) => e.target.checked && handlePaymentNotification(order.id!)}
                                    style={{ marginRight: 8 }}
                                  />
                                  <label htmlFor={`payment-${order.id}`} style={{ fontSize: '0.875rem', cursor: 'pointer' }}>
                                    –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)
                                  </label>
                                </>
                              )}
                            </Box>
                          </CardContent>
                        </Card>
                      )}
                    </Stack>
                  </CardContent>

                  {/* Footer */}
                  <CardActions sx={{ px: 2, pb: 2, pt: 0 }}>
                    <Box display="flex" justifyContent="space-between" alignItems="center" width="100%">
                      <Box display="flex" gap={1} flexWrap="wrap">
                        {order.files && order.files.length > 0 && (
                          <>
                            {/* –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å –≤—Å–µ" –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ */}
                            {order.files.length > 1 && (
                              <Button
                                size="small"
                                variant="contained"
                                color="primary"
                                startIcon={downloadingFiles.has(`${order.id || 'unknown'}-all`) ? 
                                  <CircularProgress size={14} color="inherit" /> : 
                                  <FileDownload sx={{ fontSize: 14 }} />
                                }
                                onClick={() => order.id && handleDownloadAllFiles(order.id)}
                                disabled={downloadingFiles.has(`${order.id || 'unknown'}-all`) || !order.id}
                                sx={{ 
                                  fontSize: '0.75rem',
                                  px: 1.5,
                                  py: 0.5,
                                  textTransform: 'none',
                                  fontWeight: 600
                                }}
                              >
                                {downloadingFiles.has(`${order.id || 'unknown'}-all`) ? 
                                  '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 
                                  `–°–∫–∞—á–∞—Ç—å –≤—Å–µ (${order.files.length})`
                                }
                              </Button>
                            )}
                            
                            {/* –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã */}
                            <Box display="flex" gap={0.5} flexWrap="wrap">
                              {order.files.slice(0, order.files.length > 1 ? 2 : 3).map((filename, index) => {
                                const downloadKey = `${order.id || 'unknown'}-${filename}`;
                                const isDownloading = downloadingFiles.has(downloadKey);
                                
                                return (
                                  <Button
                                    key={index}
                                    size="small"
                                    variant="outlined"
                                    color="primary"
                                    startIcon={isDownloading ? <CircularProgress size={14} /> : <AttachFile sx={{ fontSize: 14 }} />}
                                    onClick={() => order.id && handleDownloadFile(order.id, filename)}
                                    disabled={isDownloading || !order.id}
                                    sx={{ 
                                      minWidth: 'auto',
                                      fontSize: '0.75rem',
                                      px: 1,
                                      py: 0.5,
                                      textTransform: 'none'
                                    }}
                                  >
                                    {isDownloading ? '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...' : filename.length > 15 ? filename.substring(0, 15) + '...' : filename}
                                  </Button>
                                );
                              })}
                              
                              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–µ—â–µ X —Ñ–∞–π–ª–æ–≤" –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ —á–µ–º –ø–æ–∫–∞–∑–∞–Ω–æ */}
                              {order.files.length > (order.files.length > 1 ? 2 : 3) && (
                                <Typography 
                                  variant="body2" 
                                  color="text.secondary" 
                                  sx={{ 
                                    alignSelf: 'center',
                                    fontSize: '0.75rem',
                                    fontStyle: 'italic'
                                  }}
                                >
                                  +{order.files.length - (order.files.length > 1 ? 2 : 3)} –µ—â–µ
                                </Typography>
                              )}
                            </Box>
                          </>
                        )}
                      </Box>
                      
                      <Box display="flex" alignItems="center" gap={1}>
                        {/* –ö–Ω–æ–ø–∫–∞ "–ù—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç */}
                        {order.status === OrderStatus.COMPLETED && (
                          <Button
                            size="small"
                            variant="outlined"
                            color="error"
                            startIcon={<EditIcon sx={{ fontSize: 14 }} />}
                            onClick={() => handleRequestRevision(order)}
                            sx={{ 
                              fontSize: '0.75rem',
                              px: 1.5,
                              py: 0.5,
                              textTransform: 'none',
                              borderColor: 'error.light',
                              '&:hover': {
                                borderColor: 'error.main',
                                backgroundColor: 'error.light',
                                color: 'white'
                              }
                            }}
                          >
                            –ù—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                          </Button>
                        )}
                        
                        <Typography variant="h6" color="primary" sx={{ fontWeight: 600 }}>
                          #{order.id}
                        </Typography>
                      </Box>
                    </Box>
                  </CardActions>
                </Card>
              </Grid>
            );
          })}
        </Grid>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π */}
      <Dialog
        open={revisionDialogOpen}
        onClose={handleCloseRevisionDialog}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          –ó–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          {selectedOrderForRevision && (
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              –ó–∞–∫–∞–∑: {selectedOrderForRevision.title}
            </Typography>
          )}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ mt: 2 }}>
            <TextField
              fullWidth
              multiline
              rows={4}
              label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ Moodle *"
              value={revisionComment}
              onChange={(e) => setRevisionComment(e.target.value)}
              placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã Moodle..."
              helperText="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ Moodle —Å —É–∫–∞–∑–∞–Ω–∏–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å"
              sx={{ mb: 3 }}
            />
            
            <TextField
              fullWidth
              label="–û—Ü–µ–Ω–∫–∞ –∏–∑ Moodle (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={revisionGrade}
              onChange={(e) => setRevisionGrade(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 3.5, –∑–∞—á—Ç–µ–Ω–æ, –Ω–µ–∑–∞—á—Ç–µ–Ω–æ, 85 –±–∞–ª–ª–æ–≤"
              helperText="–£–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ—Å—Ç–∞–≤–∏–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ Moodle"
            />
          </Box>
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 3 }}>
          <Button onClick={handleCloseRevisionDialog}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={handleSubmitRevision}
            variant="contained"
            color="error"
            disabled={submittingRevision || !revisionComment.trim()}
            startIcon={submittingRevision ? <CircularProgress size={20} /> : undefined}
          >
            {submittingRevision ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'}
          </Button>
        </DialogActions>
      </Dialog>

    </Box>
  );
};

export default OrdersPage;