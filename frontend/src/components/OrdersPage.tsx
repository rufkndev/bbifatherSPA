import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Grid,
  CircularProgress,
  LinearProgress,
  CardActions,
  Stack,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField
} from '@mui/material';
import {
  Add as AddIcon,
  CalendarToday,
  AttachFile,
  FileDownload,
  Edit as EditIcon
} from '@mui/icons-material';
import { Order, OrderStatus } from '../types';
import { getOrders, downloadFile, downloadAllFiles, api, requestOrderRevision } from '../api';
import { format, differenceInDays } from 'date-fns';
import { ru } from 'date-fns/locale';

const statusConfig = {
  [OrderStatus.NEW]: { 
    color: 'info' as const, 
    label: '–ù–æ–≤—ã–π', 
    icon: 'üÜï',
    progress: 10
  },
  [OrderStatus.WAITING_PAYMENT]: { 
    color: 'warning' as const, 
    label: '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã', 
    icon: 'üí∞',
    progress: 20
  },
  [OrderStatus.PAID]: { 
    color: 'primary' as const, 
    label: '–û–ø–ª–∞—á–µ–Ω', 
    icon: 'üí≥',
    progress: 40
  },
  [OrderStatus.IN_PROGRESS]: { 
    color: 'secondary' as const, 
    label: '–í —Ä–∞–±–æ—Ç–µ', 
    icon: '‚öôÔ∏è',
    progress: 70
  },
  [OrderStatus.COMPLETED]: { 
    color: 'success' as const, 
    label: '–í—ã–ø–æ–ª–Ω–µ–Ω', 
    icon: '‚úÖ',
    progress: 100
  },
  [OrderStatus.NEEDS_REVISION]: { 
    color: 'error' as const, 
    label: '–ù—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 
    icon: 'üîÑ',
    progress: 80
  },

};

const OrdersPage: React.FC = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [downloadingFiles, setDownloadingFiles] = useState<Set<string>>(new Set());
  const [paymentNotifications, setPaymentNotifications] = useState<Set<number>>(new Set());
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  const [revisionDialogOpen, setRevisionDialogOpen] = useState(false);
  const [selectedOrderForRevision, setSelectedOrderForRevision] = useState<Order | null>(null);
  const [revisionComment, setRevisionComment] = useState('');
  const [revisionGrade, setRevisionGrade] = useState('');
  const [submittingRevision, setSubmittingRevision] = useState(false);

  useEffect(() => {
    loadOrders();
  }, []);

  const loadOrders = async () => {
    try {
      setLoading(true);
      const response = await getOrders(1, 50); // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ–ª—å—à–µ –∑–∞–∫–∞–∑–æ–≤
      setOrders(response.orders);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };



  const handleDownloadFile = async (orderId: number, filename: string) => {
    const downloadKey = `${orderId}-${filename}`;
    
    try {
      setDownloadingFiles(prev => new Set(prev).add(downloadKey));
      await downloadFile(orderId, filename);
      console.log(`‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: ${filename} –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      alert('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setDownloadingFiles(prev => {
        const newSet = new Set(prev);
        newSet.delete(downloadKey);
        return newSet;
      });
    }
  };

  const handleDownloadAllFiles = async (orderId: number) => {
    const downloadKey = `${orderId}-all`;
    
    try {
      setDownloadingFiles(prev => new Set(prev).add(downloadKey));
      await downloadAllFiles(orderId);
      console.log(`‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∫–∞—á–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤:', error);
      alert('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setDownloadingFiles(prev => {
        const newSet = new Set(prev);
        newSet.delete(downloadKey);
        return newSet;
      });
    }
  };

  const handlePaymentNotification = async (orderId: number) => {
    try {
      const response = await api.post(`/api/orders/${orderId}/payment-notification`);
      if (response.status === 200) {
        console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ #${orderId}`);
        // –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        setPaymentNotifications(prev => new Set(prev).add(orderId));
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        alert('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const handleRequestRevision = (order: Order) => {
    setSelectedOrderForRevision(order);
    setRevisionComment('');
    setRevisionGrade('');
    setRevisionDialogOpen(true);
  };

  const handleSubmitRevision = async () => {
    if (!selectedOrderForRevision || !selectedOrderForRevision.id || !revisionComment.trim()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º');
      return;
    }

    try {
      setSubmittingRevision(true);
      const updatedOrder = await requestOrderRevision(
        selectedOrderForRevision.id,
        revisionComment.trim(),
        revisionGrade.trim() || undefined
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ
      setOrders(prev => prev.map(order => 
        order.id === updatedOrder.id ? updatedOrder : order
      ));
      
      setRevisionDialogOpen(false);
      setSelectedOrderForRevision(null);
      setRevisionComment('');
      setRevisionGrade('');
      
      alert('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #${selectedOrderForRevision.id}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:', error);
      alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setSubmittingRevision(false);
    }
  };

  const handleCloseRevisionDialog = () => {
    setRevisionDialogOpen(false);
    setSelectedOrderForRevision(null);
    setRevisionComment('');
    setRevisionGrade('');
  };

  const getDeadlineStatus = (deadline: string) => {
    const deadlineDate = new Date(deadline);
    const today = new Date();
    const daysLeft = differenceInDays(deadlineDate, today);
    
    if (daysLeft < 0) {
      return { type: 'overdue', text: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω', color: 'error' };
    } else if (daysLeft === 0) {
      return { type: 'today', text: '–°–µ–≥–æ–¥–Ω—è', color: 'warning' };
    } else if (daysLeft <= 3) {
      return { type: 'urgent', text: `${daysLeft} –¥–Ω.`, color: 'warning' };
    } else {
      return { type: 'normal', text: `${daysLeft} –¥–Ω.`, color: 'default' };
    }
  };

  const getOrdersByStatus = () => {
    const grouped = orders.reduce((acc, order) => {
      const status = order.status;
      if (!acc[status]) acc[status] = [];
      acc[status].push(order);
      return acc;
    }, {} as Record<string, Order[]>);
    return grouped;
  };

  const ordersByStatus = getOrdersByStatus();
  const statsData = Object.entries(statusConfig).map(([status, config]) => ({
    status,
    config,
    count: ordersByStatus[status]?.length || 0
  }));

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
        <CircularProgress size={60} />
      </Box>
    );
  }

  return (
    <Box sx={{ maxWidth: 1400, mx: 'auto', px: 3, py: 4 }}>
      {/* Header */}
      <Box 
        sx={{
          background: '#ffffff',
          borderRadius: 4,
          p: 3,
          mb: 4,
          border: '1px solid #e2e8f0',
          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
        }}
      >
        <Typography 
          variant="h2" 
          component="h1" 
          sx={{ 
            fontWeight: 700, 
            mb: 1,
            color: '#1e293b',
          }}
        >
          –ú–æ–∏ –∑–∞–∫–∞–∑—ã
        </Typography>
        <Typography 
          variant="subtitle1" 
          sx={{ 
            color: 'grey.600',
            fontWeight: 500,
            fontSize: '1.1rem',
          }}
        >
          –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö —Ä–∞–±–æ—Ç
        </Typography>
      </Box>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {orders.length > 0 && (
        <Grid container spacing={1} mb={4}>
          {statsData.map(({ status, config, count }) => (
            <Grid item xs={6} sm={4} md={2} key={status}>
              <Card 
                sx={{ 
                  textAlign: 'center',
                  background: count > 0 
                    ? 'rgba(37, 99, 235, 0.05)'
                    : '#ffffff',
                  border: count > 0 
                    ? '1px solid rgba(37, 99, 235, 0.2)'
                    : '1px solid #e2e8f0',
                  transition: 'all 0.2s ease',
                  '&:hover': {
                    boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',
                  },
                }}
              >
                <CardContent sx={{ py: 2, px: 1 }}>
                  <Box
                    sx={{
                      fontSize: '1.5rem',
                      mb: 1,
                      opacity: count > 0 ? 1 : 0.5,
                      transition: 'all 0.2s ease',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      minHeight: '2rem',
                      lineHeight: 1,
                    }}
                  >
                    {config.icon}
                  </Box>
                  
                  <Typography 
                    variant="h5" 
                    sx={{ 
                      fontWeight: 700,
                      mb: 0.5,
                      color: count > 0 ? '#2563eb' : '#64748b',
                      fontSize: '1.5rem',
                    }}
                  >
                    {count}
                  </Typography>
                  
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      color: count > 0 ? '#374151' : '#6b7280',
                      fontWeight: 500,
                      fontSize: '0.75rem',
                      lineHeight: 1.2,
                    }}
                  >
                    {config.label}
                  </Typography>
                </CardContent>
              </Card>
            </Grid>
          ))}
        </Grid>
      )}

      {/* –ë–ª–æ–∫ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏ */}
      <Card 
        sx={{ 
          mb: 4,
          background: 'rgba(37, 99, 235, 0.05)',
          border: '1px solid rgba(37, 99, 235, 0.2)', 
          position: 'relative',
          '&::before': {
            content: '""',
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            height: '3px',
            background: '#2563eb',
          }
        }}
      >
        <CardContent sx={{ py: 3 }}>
          <Box display="flex" alignItems="center" gap={3}>
            <Box sx={{ 
              width: 48, 
              height: 48, 
              borderRadius: '8px', 
              background: '#2563eb',
              display: 'flex', 
              alignItems: 'center', 
              justifyContent: 'center',
              boxShadow: '0 2px 8px rgba(37, 99, 235, 0.2)',
            }}>
              <Typography 
                variant="h6" 
                sx={{ 
                  color: 'white',
                  fontSize: '1.5rem',
                  lineHeight: 1,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                }}
              >
                üí¨
              </Typography>
            </Box>
            <Box flexGrow={1}>
              <Typography 
                variant="h5" 
                sx={{ 
                  fontWeight: 600, 
                  mb: 1,
                  color: '#1e293b',
                }}
              >
                –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
              </Typography>
              <Typography 
                variant="body1" 
                sx={{ 
                  color: 'grey.700',
                  fontWeight: 500,
                  fontSize: '1rem',
                }}
              >
                –ü–æ —Å–ª–æ–∂–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –≤ Telegram:{' '}
                <Box 
                  component="span" 
                  sx={{ 
                    fontWeight: 600,
                    color: '#2563eb',
                  }}
                >
                  @artemonnnnnnn
                </Box>
              </Typography>
            </Box>
            <Button
              variant="contained"
              href="https://t.me/artemonnnnnnn"
              target="_blank"
              sx={{ 
                borderRadius: 6,
                px: 2,
                py: 1,
                fontWeight: 600,
                textTransform: 'none',
                background: '#2563eb',
                '&:hover': {
                  background: '#1d4ed8',
                }
              }}
            >
              –ù–∞–ø–∏—Å–∞—Ç—å
            </Button>
          </Box>
        </CardContent>
      </Card>

      {/* –ó–∞–∫–∞–∑—ã */}
      {orders.length === 0 ? (
        <Card 
          sx={{ 
            textAlign: 'center', 
            py: 8,
            background: '#ffffff',
            border: '2px dashed #d1d5db',
            borderRadius: 4,
          }}
        >
          <CardContent sx={{ position: 'relative', zIndex: 1 }}>
            <Box
              sx={{
                fontSize: '4rem',
                mb: 3,
                opacity: 0.7,
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                minHeight: '5rem',
                lineHeight: 1,
              }}
            >
              üìù
            </Box>
            
            <Typography 
              variant="h3" 
              gutterBottom 
              sx={{ 
                fontWeight: 700, 
                mb: 2,
                color: '#1e293b',
              }}
            >
              –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤
            </Typography>
            
            <Typography 
              variant="h6" 
              sx={{ 
                mb: 4,
                color: 'grey.600',
                fontWeight: 500,
                maxWidth: 400,
                mx: 'auto',
              }}
            >
              –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞—à–∏–º–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏!
            </Typography>
            
            <Button
              component={Link}
              to="/create"
              variant="contained"
              size="large"
              startIcon={<AddIcon />}
              sx={{ 
                borderRadius: 4, 
                px: 3, 
                py: 1.5,
                fontSize: '0.9rem',
                fontWeight: 600,
                textTransform: 'none',
                background: '#2563eb',
                '&:hover': {
                  background: '#1d4ed8',
                }
              }}
            >
              –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
            </Button>
          </CardContent>
        </Card>
      ) : (
        <Grid container spacing={3}>
          {orders.map((order) => {
            const statusInfo = statusConfig[order.status as OrderStatus];
            const deadlineStatus = getDeadlineStatus(order.deadline);
            
            return (
              <Grid item xs={12} md={6} lg={4} key={order.id}>
                <Card 
                  sx={{ 
                    height: '100%',
                    background: '#ffffff',
                    border: '1px solid #e2e8f0',
                    borderRadius: 4,
                    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',
                    transition: 'all 0.2s ease',
                    '&:hover': {
                      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)',
                    },
                    display: 'flex',
                    flexDirection: 'column',
                  }}
                >
                  <CardContent sx={{ 
                    height: '100%', 
                    display: 'flex', 
                    flexDirection: 'column',
                    p: 3,
                    '&:last-child': { pb: 3 }
                  }}>
                    {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å */}
                    <Box display="flex" justifyContent="space-between" alignItems="start" mb={2}>
                      <Typography 
                        variant="h6" 
                        component="h3" 
                        sx={{ 
                          fontWeight: 700,
                          color: '#1e293b',
                          flexGrow: 1,
                          pr: 1,
                          lineHeight: 1.3,
                        }}
                      >
                        {order.title}
                      </Typography>
                      <Chip
                        label={`${statusInfo.icon} ${statusConfig[order.status].label}`}
                        size="small"
                        sx={{
                          fontWeight: 600,
                          fontSize: '0.75rem',
                          background: statusInfo.color === 'success'
                            ? 'rgba(16, 185, 129, 0.1)'
                            : statusInfo.color === 'error'
                            ? 'rgba(239, 68, 68, 0.1)'
                            : 'rgba(37, 99, 235, 0.1)',
                          color: statusInfo.color === 'success'
                            ? '#059669'
                            : statusInfo.color === 'error'
                            ? '#dc2626'
                            : '#2563eb',
                          border: `1px solid ${
                            statusInfo.color === 'success'
                              ? '#10b981'
                              : statusInfo.color === 'error'
                              ? '#ef4444'
                              : '#2563eb'
                          }33`,
                        }}
                      />
                    </Box>

                    {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
                    <Box mb={3}>
                      <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                        <Typography 
                          variant="body2" 
                          sx={{ 
                            color: 'grey.600',
                            fontWeight: 600,
                            fontSize: '0.85rem',
                          }}
                        >
                          –ü—Ä–æ–≥—Ä–µ—Å—Å: {statusInfo.progress}%
                        </Typography>
                      </Box>
                      <Box
                        sx={{
                          width: '100%',
                          height: 6,
                          borderRadius: 3,
                          background: 'rgba(37, 99, 235, 0.1)',
                          position: 'relative',
                        }}
                      >
                        <Box
                          sx={{
                            width: `${statusInfo.progress}%`,
                            height: '100%',
                            background: statusInfo.color === 'success' 
                              ? '#10b981'
                              : statusInfo.color === 'error' 
                              ? '#ef4444'
                              : '#2563eb',
                            borderRadius: 3,
                            transition: 'width 0.3s ease-in-out',
                          }}
                        />
                      </Box>
                    </Box>

                    {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                    <Typography 
                      variant="body2" 
                      color="text.secondary" 
                      sx={{ 
                        mb: 2,
                        display: '-webkit-box',
                        WebkitLineClamp: 2,
                        WebkitBoxOrient: 'vertical',
                      }}
                    >
                      {order.description}
                    </Typography>

                    {/* –î–µ—Ç–∞–ª–∏ */}
                    <Stack spacing={1} mb={2}>
                      <Box display="flex" alignItems="center" gap={1}>
                        <CalendarToday sx={{ fontSize: 16, color: deadlineStatus.color === 'error' ? 'error.main' : 'text.secondary' }} />
                        <Typography 
                          variant="body2" 
                          color={deadlineStatus.color === 'error' ? 'error.main' : 'text.secondary'}
                          sx={{ fontWeight: deadlineStatus.type === 'urgent' ? 600 : 400 }}
                        >
                          {format(new Date(order.deadline), 'dd MMM yyyy', { locale: ru })} 
                          ({deadlineStatus.text})
                        </Typography>
                      </Box>

                      {order.created_at && (
                        <Typography variant="body2" color="text.secondary">
                          –°–æ–∑–¥–∞–Ω: {format(new Date(order.created_at), 'dd.MM.yyyy', { locale: ru })}
                        </Typography>
                      )}

                      {/* –ë–ª–æ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ "–æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã" */}
                      {order.status === OrderStatus.WAITING_PAYMENT && (
                        <Card sx={{ mt: 2, bgcolor: 'warning.50', border: '1px solid', borderColor: 'warning.300' }}>
                          <CardContent sx={{ py: 2 }}>
                            <Typography variant="h6" sx={{ fontWeight: 600, mb: 1, color: 'warning.dark' }}>
                              üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
                            </Typography>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                              <strong>–ö–∞—Ä—Ç–∞ –¢–±–∞–Ω–∫:</strong> +79621206360
                            </Typography>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                              <strong>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</strong> –¢–∞—Ä–∞–Ω–æ–≤ –ê. –ò. 
                            </Typography>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                              <strong>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</strong> {order.actual_price || order.subject?.price} ‚ÇΩ
                            </Typography>
                            <Box display="flex" alignItems="center" mt={2}>
                              {paymentNotifications.has(order.id!) ? (
                                <Box display="flex" alignItems="center" sx={{ color: 'success.main' }}>
                                  <span style={{ marginRight: 8 }}>‚úÖ</span>
                                  <Typography variant="body2" sx={{ fontSize: '0.875rem', fontWeight: 600 }}>
                                    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                                  </Typography>
                                </Box>
                              ) : (
                                <>
                                  <input 
                                    type="checkbox" 
                                    id={`payment-${order.id}`}
                                    onChange={(e) => e.target.checked && handlePaymentNotification(order.id!)}
                                    style={{ marginRight: 8 }}
                                  />
                                  <label htmlFor={`payment-${order.id}`} style={{ fontSize: '0.875rem', cursor: 'pointer' }}>
                                    –Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)
                                  </label>
                                </>
                              )}
                            </Box>
                          </CardContent>
                        </Card>
                      )}
                    </Stack>
                  </CardContent>

                  {/* Footer */}
                  <CardActions sx={{ px: 2, pb: 2, pt: 0 }}>
                    <Box display="flex" justifyContent="space-between" alignItems="center" width="100%">
                      <Box display="flex" gap={1} flexWrap="wrap">
                        {order.files && order.files.length > 0 && (
                          <>
                            {/* –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—á–∞—Ç—å –≤—Å–µ" –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ */}
                            {order.files.length > 1 && (
                              <Button
                                size="small"
                                variant="contained"
                                color="primary"
                                startIcon={downloadingFiles.has(`${order.id || 'unknown'}-all`) ? 
                                  <CircularProgress size={14} color="inherit" /> : 
                                  <FileDownload sx={{ fontSize: 14 }} />
                                }
                                onClick={() => order.id && handleDownloadAllFiles(order.id)}
                                disabled={downloadingFiles.has(`${order.id || 'unknown'}-all`) || !order.id}
                                sx={{ 
                                  fontSize: '0.75rem',
                                  px: 1.5,
                                  py: 0.5,
                                  textTransform: 'none',
                                  fontWeight: 600
                                }}
                              >
                                {downloadingFiles.has(`${order.id || 'unknown'}-all`) ? 
                                  '–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ...' : 
                                  `–°–∫–∞—á–∞—Ç—å –≤—Å–µ (${order.files.length})`
                                }
                              </Button>
                            )}
                            
                            {/* –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã */}
                            <Box display="flex" gap={0.5} flexWrap="wrap">
                              {order.files.slice(0, order.files.length > 1 ? 2 : 3).map((filename, index) => {
                                const downloadKey = `${order.id || 'unknown'}-${filename}`;
                                const isDownloading = downloadingFiles.has(downloadKey);
                                
                                return (
                                  <Button
                                    key={index}
                                    size="small"
                                    variant="outlined"
                                    color="primary"
                                    startIcon={isDownloading ? <CircularProgress size={14} /> : <AttachFile sx={{ fontSize: 14 }} />}
                                    onClick={() => order.id && handleDownloadFile(order.id, filename)}
                                    disabled={isDownloading || !order.id}
                                    sx={{ 
                                      minWidth: 'auto',
                                      fontSize: '0.75rem',
                                      px: 1,
                                      py: 0.5,
                                      textTransform: 'none'
                                    }}
                                  >
                                    {isDownloading ? '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ...' : filename.length > 15 ? filename.substring(0, 15) + '...' : filename}
                                  </Button>
                                );
                              })}
                              
                              {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–µ—â–µ X —Ñ–∞–π–ª–æ–≤" –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ —á–µ–º –ø–æ–∫–∞–∑–∞–Ω–æ */}
                              {order.files.length > (order.files.length > 1 ? 2 : 3) && (
                                <Typography 
                                  variant="body2" 
                                  color="text.secondary" 
                                  sx={{ 
                                    alignSelf: 'center',
                                    fontSize: '0.75rem',
                                    fontStyle: 'italic'
                                  }}
                                >
                                  +{order.files.length - (order.files.length > 1 ? 2 : 3)} –µ—â–µ
                                </Typography>
                              )}
                            </Box>
                          </>
                        )}
                      </Box>
                      
                      <Box display="flex" alignItems="center" gap={1}>
                        {/* –ö–Ω–æ–ø–∫–∞ "–ù—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è" –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç */}
                        {order.status === OrderStatus.COMPLETED && (
                          <Button
                            size="small"
                            variant="outlined"
                            color="error"
                            startIcon={<EditIcon sx={{ fontSize: 14 }} />}
                            onClick={() => handleRequestRevision(order)}
                            sx={{ 
                              fontSize: '0.75rem',
                              px: 1.5,
                              py: 0.5,
                              textTransform: 'none',
                              borderColor: 'error.light',
                              '&:hover': {
                                borderColor: 'error.main',
                                backgroundColor: 'error.light',
                                color: 'white'
                              }
                            }}
                          >
                            –ù—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                          </Button>
                        )}
                        
                        <Typography variant="h6" color="primary" sx={{ fontWeight: 600 }}>
                          #{order.id}
                        </Typography>
                      </Box>
                    </Box>
                  </CardActions>
                </Card>
              </Grid>
            );
          })}
        </Grid>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π */}
      <Dialog
        open={revisionDialogOpen}
        onClose={handleCloseRevisionDialog}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          –ó–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
          {selectedOrderForRevision && (
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              –ó–∞–∫–∞–∑: {selectedOrderForRevision.title}
            </Typography>
          )}
        </DialogTitle>
        <DialogContent>
          <Box sx={{ mt: 2 }}>
            <TextField
              fullWidth
              multiline
              rows={4}
              label="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ Moodle *"
              value={revisionComment}
              onChange={(e) => setRevisionComment(e.target.value)}
              placeholder="–í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã Moodle..."
              helperText="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ Moodle —Å —É–∫–∞–∑–∞–Ω–∏–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å"
              sx={{ mb: 3 }}
            />
            
            <TextField
              fullWidth
              label="–û—Ü–µ–Ω–∫–∞ –∏–∑ Moodle (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
              value={revisionGrade}
              onChange={(e) => setRevisionGrade(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 3.5, –∑–∞—á—Ç–µ–Ω–æ, –Ω–µ–∑–∞—á—Ç–µ–Ω–æ, 85 –±–∞–ª–ª–æ–≤"
              helperText="–£–∫–∞–∂–∏—Ç–µ –æ—Ü–µ–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ—Å—Ç–∞–≤–∏–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ Moodle"
            />
          </Box>
        </DialogContent>
        <DialogActions sx={{ px: 3, pb: 3 }}>
          <Button onClick={handleCloseRevisionDialog}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            onClick={handleSubmitRevision}
            variant="contained"
            color="error"
            disabled={submittingRevision || !revisionComment.trim()}
            startIcon={submittingRevision ? <CircularProgress size={20} /> : undefined}
          >
            {submittingRevision ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è */}
      <Box 
        sx={{ 
          mt: 6, 
          pt: 4, 
          borderTop: '1px solid #e2e8f0',
          textAlign: 'center'
        }}
      >
        <Typography 
          variant="body2" 
          sx={{ 
            color: '#6b7280',
            fontSize: '0.75rem',
            lineHeight: 1.4,
            maxWidth: 800,
            mx: 'auto',
            px: 2,
          }}
        >
          –ò—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
          <br />
          1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω
          <br />
          2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –æ–¥–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—á–∞–Ω–∏–π –ø–æ —Ä–∞–±–æ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
          <br />
          3. –¶–µ–Ω—ã –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
          <br />
          4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É –ø–æ–∑–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–µ–¥–ª–∞–π–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Å—Ç–∞–≤–∏–ª –¥–µ–¥–ª–∞–π–Ω, —Å—Ä–æ–∫ –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω–µ–µ –æ–¥–Ω–æ–π –Ω–µ–¥–µ–ª–∏
        </Typography>
      </Box>

    </Box>
  );
};

export default OrdersPage;