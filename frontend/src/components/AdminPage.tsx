import React, { useState, useEffect } from 'react';
import AdminLogin from './AdminLogin';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  CircularProgress
} from '@mui/material';
import { Order, OrderStatus } from '../types';
import { getOrders, updateOrderStatus, markOrderAsPaid, uploadOrderFiles } from '../api';
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';

const statusColors = {
  [OrderStatus.NEW]: 'default',
  [OrderStatus.WAITING_PAYMENT]: 'warning',
  [OrderStatus.PAID]: 'info',
  [OrderStatus.IN_PROGRESS]: 'secondary',
  [OrderStatus.COMPLETED]: 'success',
  [OrderStatus.NEEDS_REVISION]: 'error',
} as const;

const statusLabels = {
  [OrderStatus.NEW]: '–ù–æ–≤—ã–π',
  [OrderStatus.WAITING_PAYMENT]: '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã',
  [OrderStatus.PAID]: '–û–ø–ª–∞—á–µ–Ω',
  [OrderStatus.IN_PROGRESS]: '–í —Ä–∞–±–æ—Ç–µ',
  [OrderStatus.COMPLETED]: '–í—ã–ø–æ–ª–Ω–µ–Ω',
  [OrderStatus.NEEDS_REVISION]: '–ù—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
};

const AdminPage: React.FC = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(
    localStorage.getItem('adminAuth') === 'true'
  );
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [newStatus, setNewStatus] = useState<OrderStatus>(OrderStatus.NEW);
  const [uploading, setUploading] = useState(false);
  const [error, setError] = useState<string>('');

  useEffect(() => {
    if (isAuthenticated) {
      loadOrders();
    }
  }, [isAuthenticated]);

  const handleLogin = () => {
    setIsAuthenticated(true);
  };

  if (!isAuthenticated) {
    return <AdminLogin onLogin={handleLogin} />;
  }

  const loadOrders = async () => {
    try {
      setLoading(true);
      const response = await getOrders(1, 100); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
      setOrders(response.orders);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã');
    } finally {
      setLoading(false);
    }
  };

  const handleOrderClick = (order: Order) => {
    setSelectedOrder(order);
    setNewStatus(order.status);
    setDialogOpen(true);
  };

  const handleStatusUpdate = async () => {
    if (!selectedOrder || !selectedOrder.id) return;

    try {
      const updatedOrder = await updateOrderStatus(selectedOrder.id, newStatus);
      setOrders(prev => prev.map(order => 
        order.id === updatedOrder.id ? updatedOrder : order
      ));
      setDialogOpen(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞');
    }
  };

  const handleMarkAsPaid = async () => {
    if (!selectedOrder || !selectedOrder.id) return;

    try {
      const updatedOrder = await markOrderAsPaid(selectedOrder.id);
      setOrders(prev => prev.map(order => 
        order.id === updatedOrder.id ? updatedOrder : order
      ));
      setSelectedOrder(updatedOrder);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π');
    }
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!selectedOrder || !selectedOrder.id || !event.target.files) return;

    try {
      setUploading(true);
      const updatedOrder = await uploadOrderFiles(selectedOrder.id, event.target.files);
      setOrders(prev => prev.map(order => 
        order.id === updatedOrder.id ? updatedOrder : order
      ));
      setSelectedOrder(updatedOrder);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã');
    } finally {
      setUploading(false);
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box>
      <Typography variant="h4" component="h1" gutterBottom>
        –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>
          {error}
        </Alert>
      )}

      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            –í—Å–µ –∑–∞–∫–∞–∑—ã ({orders.length})
          </Typography>
          
          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>ID</TableCell>
                  <TableCell>–°—Ç—É–¥–µ–Ω—Ç</TableCell>
                  <TableCell>–ì—Ä—É–ø–ø–∞</TableCell>
                  <TableCell>–ù–∞–∑–≤–∞–Ω–∏–µ</TableCell>
                  <TableCell>–ü—Ä–µ–¥–º–µ—Ç</TableCell>
                  <TableCell>–î–µ–¥–ª–∞–π–Ω</TableCell>
                  <TableCell>–°—Ç–∞—Ç—É—Å</TableCell>
                  <TableCell>–û–ø–ª–∞—Ç–∞</TableCell>
                  <TableCell>–°–æ–∑–¥–∞–Ω</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {orders.map((order) => (
                  <TableRow
                    key={order.id}
                    hover
                    onClick={() => handleOrderClick(order)}
                    sx={{ cursor: 'pointer' }}
                  >
                    <TableCell>{order.id}</TableCell>
                    <TableCell>{order.student?.name}</TableCell>
                    <TableCell>{order.student?.group || '-'}</TableCell>
                    <TableCell>{order.title}</TableCell>
                    <TableCell>{order.subject?.name}</TableCell>
                    <TableCell>
                      {format(new Date(order.deadline), 'dd.MM.yyyy', { locale: ru })}
                    </TableCell>
                    <TableCell>
                      <Chip
                        label={statusLabels[order.status]}
                        color={statusColors[order.status]}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Chip
                        label={order.is_paid ? '–î–∞' : '–ù–µ—Ç'}
                        color={order.is_paid ? 'success' : 'error'}
                        variant="outlined"
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      {order.created_at && format(new Date(order.created_at), 'dd.MM.yyyy', { locale: ru })}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </CardContent>
      </Card>

      {/* –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>
          –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{selectedOrder?.id}
        </DialogTitle>
        <DialogContent>
          {selectedOrder && (
            <Box sx={{ pt: 2 }}>
              <Typography variant="h6" gutterBottom>{selectedOrder.title}</Typography>
              
              <Typography variant="body2" color="text.secondary" gutterBottom>
                <strong>–°—Ç—É–¥–µ–Ω—Ç:</strong> {selectedOrder.student?.name}
              </Typography>
              
              <Typography variant="body2" color="text.secondary" gutterBottom>
                <strong>–ì—Ä—É–ø–ø–∞:</strong> {selectedOrder.student?.group || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
              </Typography>
              
              <Typography variant="body2" color="text.secondary" gutterBottom>
                <strong>Telegram:</strong> {selectedOrder.student?.telegram || '–ù–µ —É–∫–∞–∑–∞–Ω'}
              </Typography>
              
              <Typography variant="body2" color="text.secondary" gutterBottom>
                <strong>–ü—Ä–µ–¥–º–µ—Ç:</strong> {selectedOrder.subject?.name}
              </Typography>
              
              <Typography variant="body2" color="text.secondary" gutterBottom>
                <strong>–î–µ–¥–ª–∞–π–Ω:</strong> {format(new Date(selectedOrder.deadline), 'dd.MM.yyyy', { locale: ru })}
              </Typography>
              
              <Typography variant="body2" gutterBottom sx={{ mt: 2 }}>
                <strong>–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:</strong> {selectedOrder.description}
              </Typography>
              
              {selectedOrder.variant_info && (
                <Typography variant="body2" gutterBottom sx={{ mt: 1 }}>
                  <strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ:</strong> {selectedOrder.variant_info}
                </Typography>
              )}
              
              {selectedOrder.input_data && (
                <Typography variant="body2" gutterBottom sx={{ mt: 1 }}>
                  <strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</strong> {selectedOrder.input_data}
                </Typography>
              )}
              
              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö */}
              {selectedOrder.status === OrderStatus.NEEDS_REVISION && (
                <Box sx={{ mt: 2, p: 2, bgcolor: '#ffebee', borderRadius: 1 }}>
                  <Typography variant="subtitle2" color="error" gutterBottom>
                    üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                  </Typography>
                  {selectedOrder.revision_comment && (
                    <Typography variant="body2" gutterBottom sx={{ mt: 1 }}>
                      <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> {selectedOrder.revision_comment}
                    </Typography>
                  )}
                  {selectedOrder.revision_grade && (
                    <Typography variant="body2" sx={{ mt: 1 }}>
                      <strong>–û—Ü–µ–Ω–∫–∞ –∏–∑ Moodle:</strong> {selectedOrder.revision_grade}
                    </Typography>
                  )}
                </Box>
              )}
              
              <Box sx={{ mt: 3 }}>
                <FormControl fullWidth sx={{ mb: 2 }}>
                  <InputLabel>–°—Ç–∞—Ç—É—Å</InputLabel>
                  <Select
                    value={newStatus}
                    onChange={(e) => setNewStatus(e.target.value as OrderStatus)}
                    label="–°—Ç–∞—Ç—É—Å"
                  >
                    {Object.entries(statusLabels).map(([value, label]) => (
                      <MenuItem key={value} value={value}>
                        {label}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
                
                <Box sx={{ mb: 2 }}>
                  {!selectedOrder.is_paid && (
                    <Button
                      variant="outlined"
                      color="success"
                      onClick={handleMarkAsPaid}
                      sx={{ mr: 2 }}
                    >
                      –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π
                    </Button>
                  )}
                  
                  <Button
                    variant="outlined"
                    component="label"
                    disabled={uploading}
                  >
                    {uploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã'}
                    <input
                      type="file"
                      hidden
                      multiple
                      onChange={handleFileUpload}
                    />
                  </Button>
                </Box>
                
                {selectedOrder.files && selectedOrder.files.length > 0 && (
                  <Box>
                    <Typography variant="body2" gutterBottom>
                      –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
                    </Typography>
                    {selectedOrder.files.map((file, index) => (
                      <Typography key={index} variant="body2" color="primary">
                        üìé {file}
                      </Typography>
                    ))}
                  </Box>
                )}
              </Box>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={handleStatusUpdate} variant="contained">
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default AdminPage;