import json
import os
import shutil
import zipfile
import tempfile
from datetime import datetime
from typing import List, Dict, Any, Optional
from fastapi import FastAPI, HTTPException, Request, UploadFile, File, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse, FileResponse
import requests
from supabase import create_client, Client
from dotenv import load_dotenv
from contextlib import asynccontextmanager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    if init_database():
        print("üöÄ Backend –∑–∞–ø—É—â–µ–Ω —Å Supabase!")
    else:
        print("‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
    
    if BOT_TOKEN and BOT_CHAT_ID:
        print("üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        print("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    yield
    # Shutdown
    print("üëã Backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="Student Orders API",
    description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
FRONTEND_URLS = os.getenv("FRONTEND_URLS", "http://localhost:3000").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=FRONTEND_URLS + ["https://bbifather.ru", "https://www.bbifather.ru"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SUPABASE_URL = os.getenv("SUPABASE_URL", "")
SUPABASE_KEY = os.getenv("SUPABASE_KEY", "")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
BOT_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")

# URL –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º (–¥–ª—è Telegram Bot API)
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "https://bbifather.ru")

print(f"üîó PUBLIC_BASE_URL: {PUBLIC_BASE_URL}")

if not SUPABASE_URL or not SUPABASE_KEY:
    print("‚ö†Ô∏è SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY) if SUPABASE_URL and SUPABASE_KEY else None

# –ü—É—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–æ–∫
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
UPLOADS_DIR = os.path.join(BASE_DIR, "uploads")
os.makedirs(UPLOADS_DIR, exist_ok=True)

def init_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü"""
    if not supabase:
        print("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        response = supabase.table('subjects').select('id').limit(1).execute()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        subjects_count = supabase.table('subjects').select('id', count='exact').execute()
        if subjects_count.count == 0:
            print("‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ subjects –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ Supabase Dashboard.")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

def send_notification(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram"""
    if not BOT_TOKEN or not BOT_CHAT_ID:
        print("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print(f"üì± –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {message}")
        return
    
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': BOT_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        print(f"üì± –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {message}")

async def send_status_notification_to_user(order: dict, new_status: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    if not BOT_TOKEN:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
        
    user_telegram = order['student'].get('telegram')
    if not user_telegram:
        print("‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω telegram")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    try:
        student_response = supabase.table('students').select('chat_id').eq('telegram', user_telegram).limit(1).execute()
        
        if not student_response.data or not student_response.data[0].get('chat_id'):
            print(f"‚ö†Ô∏è Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_telegram}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start")
            return
        
        user_chat_id = student_response.data[0]['chat_id']
        print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_telegram} (chat_id: {user_chat_id})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id: {e}")
        return
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    status_messages = {
        'new': {
            'emoji': 'üÜï',
            'title': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω',
            'message': '–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Å–∏—Å—Ç–µ–º—É. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞.'
        },
        'pending_payment': {
            'emoji': 'üí≥', 
            'title': '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞',
            'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º.'
        },
        'paid': {
            'emoji': '‚úÖ',
            'title': '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', 
            'message': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.'
        },
        'in_progress': {
            'emoji': '‚öôÔ∏è',
            'title': '–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å',
            'message': '–ú—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!'
        },
        'completed': {
            'emoji': 'üéâ',
            'title': '–†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
            'message': '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! –§–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.'
        },
        'needs_revision': {
            'emoji': 'üîÑ',
            'title': '–¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            'message': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –Ω–µ–±–æ–ª—å—à–∏–µ –ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.'
        },
        'cancelled': {
            'emoji': '‚ùå',
            'title': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
            'message': '–ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
        }
    }
    
    status_info = status_messages.get(new_status, {
        'emoji': 'üìù',
        'title': '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω',
        'message': f'–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}'
    })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notification_text = f"""
{status_info['emoji']} <b>{status_info['title']}</b>

üìù <b>–ó–∞–∫–∞–∑ #{order['id']}:</b> {order['title']}
üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order['subject']['name']}
‚è∞ <b>–î–µ–¥–ª–∞–π–Ω:</b> {order['deadline']}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{status_info['message']}
    """.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    if new_status == 'completed':
        notification_text += "\n\nüì± –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π 'üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã' –≤ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."
    elif new_status == 'needs_revision':
        if order.get('revision_comment'):
            notification_text += f"\n\nüìã <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{order['revision_comment']}"
    
    notification_text += "\n\nüí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"
    
    # –°–æ–∑–¥–∞–µ–º reply keyboard –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    keyboard = {
        "keyboard": [
            [
                {"text": "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "web_app": {"url": f"https://bbifather.ru?telegram={user_telegram}"}},
            ],
            [
                {"text": "üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"},
                {"text": "üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã"}
            ]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False,
        "input_field_placeholder": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ"
    }
    
    try:
        telegram_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        payload = {
            'chat_id': user_chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –≤–º–µ—Å—Ç–æ username
            'text': notification_text,
            'parse_mode': 'HTML',
            'reply_markup': keyboard
        }
        
        response = requests.post(telegram_url, json=payload, timeout=10)
        
        if response.status_code == 200:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ '{new_status}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_telegram}")
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ @{user_telegram}: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_telegram}: {e}")

# –°—Ç–∞—Ä—ã–π startup —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º lifespan

# API Routes
@app.get("/")
def read_root():
    return {"message": "Student Orders API is running"}

async def save_chat_id_handler(request: Request):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await request.json()
        telegram_username = data.get('telegram_username', '').lstrip('@')
        chat_id = data.get('chat_id')
        first_name = data.get('first_name', '')
        last_name = data.get('last_name', '')
        
        print(f"üíæ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ chat_id: @{telegram_username} -> {chat_id}")
        
        if not telegram_username or not chat_id:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω telegram_username –∏–ª–∏ chat_id")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ telegram username
        student_response = supabase.table('students').select('id').eq('telegram', telegram_username).limit(1).execute()
        
        if student_response.data:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_id = student_response.data[0]['id']
            supabase.table('students').update({
                'chat_id': str(chat_id),
                'name': first_name + (' ' + last_name if last_name else '')
            }).eq('id', student_id).execute()
            print(f"‚úÖ Chat ID –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ @{telegram_username} (ID: {student_id})")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å chat_id (–±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞)
            supabase.table('students').insert({
                'telegram': telegram_username,
                'chat_id': str(chat_id),
                'name': first_name + (' ' + last_name if last_name else ''),
                'group_name': '–ù–µ —É–∫–∞–∑–∞–Ω–∞'  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            }).execute()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç @{telegram_username} —Å chat_id")
        
        return {"status": "success", "message": "Chat ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

@app.post("/api/save-chat-id")
async def save_chat_id_api(request: Request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api/)"""
    return await save_chat_id_handler(request)

@app.post("/save-chat-id")
async def save_chat_id_direct(request: Request):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api/)"""
    return await save_chat_id_handler(request)

async def try_direct_file_upload(file_info, file_name: str, order_id: int, user_chat_id: str, send_document_url: str) -> bool:
    """–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Telegram —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        print(f"üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è {file_name}")
        
        if isinstance(file_info, str):
            # –§–∞–π–ª –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
            local_file_path = os.path.join(UPLOADS_DIR, f"order_{order_id}", file_name)
            print(f"üìÅ –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {local_file_path}")
            
            if os.path.exists(local_file_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (Telegram –ª–∏–º–∏—Ç 50MB)
                file_size = os.path.getsize(local_file_path)
                max_size = 50 * 1024 * 1024  # 50MB –≤ –±–∞–π—Ç–∞—Ö
                
                if file_size > max_size:
                    print(f"‚ö†Ô∏è –§–∞–π–ª {file_name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size / 1024 / 1024:.1f}MB) –¥–ª—è Telegram (–ª–∏–º–∏—Ç 50MB)")
                    return False
                
                print(f"üìé –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é: {file_name} ({file_size / 1024 / 1024:.1f}MB)")
                
                with open(local_file_path, 'rb') as file_data:
                    files = {'document': (file_name, file_data)}
                    data = {
                        'chat_id': user_chat_id,
                        'caption': f"üìé {file_name} ({file_size / 1024 / 1024:.1f}MB)"
                    }
                    response = requests.post(send_document_url, files=files, data=data, timeout=90)
                    
                    if response.status_code == 200:
                        print(f"‚úÖ –§–∞–π–ª {file_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é")
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_name}: {response.text}")
                        return False
            else:
                print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_file_path}")
                return False
        else:
            print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è URL-—Ñ–∞–π–ª–æ–≤")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è {file_name}: {e}")
        return False

async def send_files_to_telegram_handler(request: Request):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ –≤ Telegram"""
    try:
        data = await request.json()
        order_id = data.get('order_id')
        telegram_username = data.get('telegram', '').lstrip('@')
        
        print(f"üìÅ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ #{order_id} –¥–ª—è @{telegram_username}")
        
        if not order_id or not telegram_username:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω order_id –∏–ª–∏ telegram")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å —Ñ–∞–π–ª–∞–º–∏
        order = get_order(order_id)
        if not order:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if order['student']['telegram'] != telegram_username:
            raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∑–∞–∫–∞–∑–∞ –µ—Å—Ç—å —Ñ–∞–π–ª—ã
        files = order.get('files', [])
        if not files:
            raise HTTPException(status_code=404, detail="–£ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤")
        
        print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ #{order_id}:")
        print(f"   –¢–∏–ø: {type(files)}")
        print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {files}")
        for i, file_info in enumerate(files):
            print(f"   –§–∞–π–ª {i}: {type(file_info)} = {file_info}")
        
        # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        student_response = supabase.table('students').select('chat_id').eq('telegram', telegram_username).limit(1).execute()
        
        if not student_response.data or not student_response.data[0].get('chat_id'):
            raise HTTPException(status_code=404, detail="Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É /start")
        
        user_chat_id = student_response.data[0]['chat_id']
        print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å chat_id: {user_chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        intro_message = f"""
üìÅ <b>–§–∞–π–ª—ã –∑–∞–∫–∞–∑–∞ #{order_id}</b>

üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order['title']}
üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order['subject']['name']}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {order['status']}

üìé –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã ({len(files)} —à—Ç.):
        """.strip()
        
        telegram_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        intro_payload = {
            'chat_id': user_chat_id,
            'text': intro_message,
            'parse_mode': 'HTML'
        }
        
        requests.post(telegram_url, json=intro_payload, timeout=10)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        sent_count = 0
        skipped_large_files = []
        failed_files = []
        
        for file_info in files:
            file_name = "unknown_file"  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å)
                if isinstance(file_info, str):
                    # –ï—Å–ª–∏ file_info —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, —Ç–æ —ç—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞
                    file_name = file_info
                    # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏
                    file_url = f"{PUBLIC_BASE_URL}/api/orders/{order_id}/download/{file_name}"
                elif isinstance(file_info, dict):
                    # –ï—Å–ª–∏ file_info —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º URL –∏ –∏–º—è
                    file_url = file_info.get('url')
                    file_name = file_info.get('name', 'file')
                else:
                    print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {type(file_info)}")
                    failed_files.append(file_name)
                    continue
                
                if not file_name:
                    print(f"‚ùå –ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: {file_info}")
                    failed_files.append("unnamed_file")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                if isinstance(file_info, str):
                    local_file_path = os.path.join(UPLOADS_DIR, f"order_{order_id}", file_name)
                    if os.path.exists(local_file_path):
                        file_size = os.path.getsize(local_file_path)
                        max_size = 50 * 1024 * 1024  # 50MB
                        
                        if file_size > max_size:
                            print(f"‚ö†Ô∏è –§–∞–π–ª {file_name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size / 1024 / 1024:.1f}MB) –¥–ª—è Telegram")
                            skipped_large_files.append(f"{file_name} ({file_size / 1024 / 1024:.1f}MB)")
                            continue
                
                print(f"üìé –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª: {file_name}")
                
                send_document_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
                success = False
                
                # –î–ª—è —Å—Ç—Ä–æ–∫ (–ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã) —Å—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                if isinstance(file_info, str):
                    print(f"üìÅ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É")
                    success = await try_direct_file_upload(file_info, file_name, order_id, user_chat_id, send_document_url)
                
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–ª–∏ —ç—Ç–æ URL-—Ñ–∞–π–ª, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ URL
                if not success:
                    print(f"üîó URL —Ñ–∞–π–ª–∞: {file_url}")
                    print(f"üåê –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ URL")
                    
                    document_payload = {
                        'chat_id': user_chat_id,
                        'document': file_url,
                        'caption': f"üìé {file_name}"
                    }
                    
                    response = requests.post(send_document_url, json=document_payload, timeout=60)
                    
                    if response.status_code == 200:
                        print(f"‚úÖ –§–∞–π–ª {file_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ URL")
                        success = True
                    else:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ URL: {response.text}")
                        
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏)
                        if isinstance(file_info, str):
                            print(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏")
                            success = await try_direct_file_upload(file_info, file_name, order_id, user_chat_id, send_document_url)
                
                if success:
                    sent_count += 1
                else:
                    failed_files.append(file_name)
                    
            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_name}: {e}")
                failed_files.append(file_name)
                # –í –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –ø—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                if isinstance(file_info, str):
                    try:
                        success = await try_direct_file_upload(file_info, file_name, order_id, user_chat_id, send_document_url)
                        if success:
                            sent_count += 1
                            failed_files.remove(file_name)  # –£–±–∏—Ä–∞–µ–º –∏–∑ –Ω–µ—É–¥–∞—á–Ω—ã—Ö, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å
                    except Exception as final_e:
                        print(f"‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {file_name}: {final_e}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_message_parts = []
        
        if sent_count > 0:
            final_message_parts.append(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∏–∑ {len(files)} —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ #{order_id}")
        
        if skipped_large_files:
            final_message_parts.append(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {len(skipped_large_files)} –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>50MB):")
            for file_info in skipped_large_files:
                final_message_parts.append(f"   ‚Ä¢ {file_info}")
            final_message_parts.append("üí° –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        
        if failed_files:
            final_message_parts.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {len(failed_files)} —Ñ–∞–π–ª–æ–≤:")
            for file_name in failed_files:
                final_message_parts.append(f"   ‚Ä¢ {file_name}")
        
        if sent_count == 0:
            final_message_parts.append("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        
        final_message = "\n".join(final_message_parts)
        
        final_payload = {
            'chat_id': user_chat_id,
            'text': final_message,
            'parse_mode': 'HTML'
        }
        
        requests.post(telegram_url, json=final_payload, timeout=10)
        
        return {
            "status": "success" if sent_count > 0 else "partial_success" if sent_count == 0 and len(files) > 0 else "error",
            "message": final_message,
            "sent_count": sent_count,
            "total_files": len(files),
            "skipped_large_files": len(skipped_large_files),
            "failed_files": len(failed_files),
            "details": {
                "sent_files": sent_count,
                "large_files_skipped": skipped_large_files,
                "failed_files": failed_files
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ Telegram: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

@app.post("/api/send-files-to-telegram")
async def send_files_to_telegram_api(request: Request):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ –≤ Telegram (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api/)"""
    return await send_files_to_telegram_handler(request)

@app.post("/send-files-to-telegram")
async def send_files_to_telegram_direct(request: Request):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ –≤ Telegram (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api/)"""
    return await send_files_to_telegram_handler(request)

# Students endpoints
@app.get("/api/students")
def get_students():
    try:
        response = supabase.table('students').select('*').order('created_at', desc=True).execute()
        return response.data
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {str(e)}")

@app.post("/api/students")
def create_student(request: Request):
    pass  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞

# Subjects endpoints
@app.get("/api/subjects")
def get_subjects():
    try:
        response = supabase.table('subjects').select('*').eq('is_active', True).order('name').execute()
        return response.data
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {str(e)}")

# Orders endpoints
@app.get("/api/orders")
def get_orders(page: int = 1, limit: int = 10, telegram: str = None):
    try:
        print(f"üì• GET /api/orders - page: {page}, limit: {limit}, telegram: {telegram}")
        offset = (page - 1) * limit
        
        query = supabase.table('orders').select("""
            *,
            students!inner(id, name, group_name, telegram),
            subjects!inner(id, name, description, price)
        """)

        count_query = supabase.table('orders').select('id', count='exact', head=True)

        if telegram:
            clean_telegram = telegram.lstrip('@')
            print(f"üîç –ò—â–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{clean_telegram}")
            
            # 1. –ù–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ telegram
            student_response = supabase.table('students').select('id').eq('telegram', clean_telegram).limit(1).execute()
            print(f"üë§ –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_response}")
            
            if not student_response.data:
                # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                print(f"‚ùå –°—Ç—É–¥–µ–Ω—Ç @{clean_telegram} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return {"orders": [], "total": 0}
                
            student_id = student_response.data[0]['id']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç ID: {student_id}")
            
            # 2. –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ student_id
            query = query.eq('student_id', student_id)
            count_query = count_query.eq('student_id', student_id)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        print(f"üìä –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤...")
        response = query.order('created_at', desc=True).range(offset, offset + limit - 1).execute()
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(response.data)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_response = count_query.execute()
        total = total_response.count if total_response.count is not None else 0
        print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {total}")

        orders = []
        for order_data in response.data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            order = {
                **order_data,
                'student': {
                    'id': order_data['students']['id'],
                    'name': order_data['students']['name'],
                    'group': order_data['students']['group_name'],
                    'telegram': order_data['students']['telegram']
                },
                'subject': {
                    'id': order_data['subjects']['id'],
                    'name': order_data['subjects']['name'],
                    'description': order_data['subjects']['description'],
                    'price': order_data['subjects']['price']
                },
                'files': json.loads(order_data.get('files', '[]')) if isinstance(order_data.get('files'), str) else order_data.get('files', [])
            }
            del order['students']
            del order['subjects']
            orders.append(order)
        
        print(f"‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
        return {"orders": orders, "total": total}
        
    except Exception as e:
        print(f"‚ùå BACKEND: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")

@app.get("/api/orders/{order_id}")
def get_order(order_id: int):
    try:
        response = supabase.table('orders').select("""
            *,
            students!inner(id, name, group_name, telegram),
            subjects!inner(id, name, description, price)
        """).eq('id', order_id).single().execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        order = response.data
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã
        if order.get('files'):
            try:
                order['files'] = json.loads(order['files']) if isinstance(order['files'], str) else order['files']
            except:
                order['files'] = []
        else:
            order['files'] = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        order['student'] = {
            'id': order['students']['id'],
            'name': order['students']['name'],
            'group': order['students']['group_name'],
            'telegram': order['students']['telegram']
        }
        order['subject'] = {
            'id': order['subjects']['id'],
            'name': order['subjects']['name'],
            'description': order['subjects']['description'],
            'price': order['subjects']['price']
        }
        
        # –£–¥–∞–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        del order['students']
        del order['subjects']
        
        return order
        
    except Exception as e:
        if "No rows found" in str(e):
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}")

@app.post("/api/orders")
async def create_order(request: Request):
    data = await request.json()
    
    print("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:", json.dumps(data, indent=2, ensure_ascii=False))
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'student' not in data:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        if 'subject_id' not in data:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–º–µ—Ç")
        if not data.get('title'):
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        if not data.get('deadline'):
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω –¥–µ–¥–ª–∞–π–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_data = data['student']
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ –Ω–∏–∫–∞
        clean_telegram = student_data['telegram'].lstrip('@')
        print(f"üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞: @{clean_telegram}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç
        existing_student = supabase.table('students').select('id').eq('telegram', clean_telegram).limit(1).execute()
        print(f"üîç –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞: {existing_student}")
        
        if existing_student.data and len(existing_student.data) > 0:
            student_id = existing_student.data[0]['id']
            print(f"üë§ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç ID: {student_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            update_result = supabase.table('students').update({
                'name': student_data['name'],
                'group_name': student_data['group']
            }).eq('id', student_id).execute()
            print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞: {update_result}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            print(f"‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_data}")
            new_student = supabase.table('students').insert({
                'name': student_data['name'],
                'group_name': student_data['group'],
                'telegram': clean_telegram
            }).execute()
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {new_student}")
            student_id = new_student.data[0]['id']
            print(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç ID: {student_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π
        subject_id = data.get('subject_id')
        subject_name = "–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
        
        if subject_id is not None:
            subject_id = int(subject_id)
            subject = supabase.table('subjects').select('id, name').eq('id', subject_id).limit(1).execute()
            
            if not subject.data or len(subject.data) == 0:
                raise HTTPException(status_code=400, detail=f"–ü—Ä–µ–¥–º–µ—Ç —Å ID {subject_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            subject_name = subject.data[0]['name']
            print(f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name} (ID: {subject_id})")
        else:
            # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
            print(f"üìö –ö–∞—Å—Ç–æ–º–Ω—ã–π –∑–∞–∫–∞–∑ - –∏—â–µ–º/—Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
            custom_subject = supabase.table('subjects').select('id').eq('name', '–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç').limit(1).execute()
            
            if custom_subject.data and len(custom_subject.data) > 0:
                subject_id = custom_subject.data[0]['id']
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç ID: {subject_id}")
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
                new_custom_subject = supabase.table('subjects').insert({
                    'name': '–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç',
                    'description': '–ü—Ä–µ–¥–º–µ—Ç –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
                    'price': 0.0
                }).execute()
                subject_id = new_custom_subject.data[0]['id']
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç ID: {subject_id}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        actual_price = data.get('actual_price', 0.0)
        selected_works_json = json.dumps(data.get('selected_works', [])) if data.get('selected_works') else None
        is_full_course = data.get('is_full_course', False)
        
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {actual_price} ‚ÇΩ")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_data = {
            'student_id': student_id,
            'subject_id': subject_id,
            'title': data['title'],
            'description': data.get('description', ''),
            'input_data': data.get('input_data', ''),
            'variant_info': data.get('variant_info', ''),
            'deadline': data['deadline'],
            'selected_works': selected_works_json,
            'is_full_course': is_full_course,
            'actual_price': actual_price,
            'status': 'new'
        }
        print(f"üìù –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏: {order_data}")
        
        new_order = supabase.table('orders').insert(order_data).execute()
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {new_order}")
        
        order_id = new_order.data[0]['id']
        print(f"üìù –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ ID: {order_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        print(f"üîç –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑...")
        created_order = get_order(order_id)
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑: {created_order}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        try:
            message = f"""
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}

üë§ –°—Ç—É–¥–µ–Ω—Ç: {created_order['student']['name']}
üë• –ì—Ä—É–ø–ø–∞: {created_order['student']['group']}
üì± Telegram: {created_order['student']['telegram']}

üìö –ü—Ä–µ–¥–º–µ—Ç: {created_order['subject']['name']}
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {created_order['title']}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {created_order['description'][:200]}{'...' if len(created_order['description']) > 200 else ''}

‚è∞ –î–µ–¥–ª–∞–π–Ω: {created_order['deadline']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {actual_price} ‚ÇΩ

–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """.strip()
            
            if created_order.get('variant_info'):
                message += f"\n\nüî¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ:\n{created_order['variant_info'][:300]}{'...' if len(created_order['variant_info']) > 300 else ''}"
            
            if created_order.get('input_data'):
                message += f"\n\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n{created_order['input_data'][:300]}{'...' if len(created_order['input_data']) > 300 else ''}"
            
            send_notification(message)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        try:
            await send_status_notification_to_user(created_order, 'new')
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        return created_order
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        if "No rows found" in str(e):
            # –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass
        else:
            raise HTTPException(status_code=500, detail=str(e))

@app.patch("/api/orders/{order_id}/status")
async def update_order_status(order_id: int, request: Request):
    data = await request.json()
    status = data['status']
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        old_order = get_order(order_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        response = supabase.table('orders').update({
            'status': status,
            'updated_at': datetime.now().isoformat()
        }).eq('id', order_id).execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        updated_order = get_order(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        if old_order['status'] != status and updated_order['student'].get('telegram'):
            await send_status_notification_to_user(updated_order, status)
        
        return updated_order
        
    except Exception as e:
        if "No rows found" in str(e):
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@app.patch("/api/orders/{order_id}/paid")
def mark_order_as_paid(order_id: int):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        response = supabase.table('orders').update({
            'is_paid': True,
            'updated_at': datetime.now().isoformat()
        }).eq('id', order_id).execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return get_order(order_id)
        
    except Exception as e:
        if "No rows found" in str(e):
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã: {str(e)}")

@app.post("/api/orders/{order_id}/files")
async def upload_order_files(order_id: int, files: list[UploadFile] = File(...)):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order_check = supabase.table('orders').select('id, title, status').eq('id', order_id).single().execute()
        if not order_check.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞
        upload_dir = os.path.join(UPLOADS_DIR, f"order_{order_id}")
        os.makedirs(upload_dir, exist_ok=True)
        
        # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        ALLOWED_EXTENSIONS = {
            # –î–æ–∫—É–º–µ–Ω—Ç—ã
            '.pdf', '.doc', '.docx', '.txt', '.rtf', '.odt',
            # –¢–∞–±–ª–∏—Ü—ã  
            '.xls', '.xlsx', '.csv', '.ods',
            # –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
            '.ppt', '.pptx', '.odp',
            # –ê—Ä—Ö–∏–≤—ã
            '.zip', '.rar', '.7z', '.tar', '.gz', '.bz2',
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.tiff',
            # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
            '.py', '.js', '.html', '.css', '.json', '.xml', '.yaml', '.yml',
            '.cpp', '.c', '.java', '.php', '.rb', '.go', '.rs', '.swift',
            # –î—Ä—É–≥–∏–µ
            '.md', '.log'
        }
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (100MB)
        MAX_FILE_SIZE = 100 * 1024 * 1024  # 100MB –≤ –±–∞–π—Ç–∞—Ö
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        saved_files = []
        rejected_files = []
        
        if not files or len(files) == 0:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ
            files_data = [
                ("completed_work.docx", "demo"),
                ("report.pdf", "demo")
            ]
            
            for filename, file_type in files_data:
                file_path = os.path.join(upload_dir, filename)
                
                if file_type == "demo" and filename.endswith('.docx'):
                    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ DOCX —Ñ–∞–π–ª
                    with zipfile.ZipFile(file_path, 'w') as docx:
                        docx.writestr('[Content_Types].xml', '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>
<Default Extension="xml" ContentType="application/xml"/>
<Override PartName="/word/document.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"/>
</Types>''')
                        docx.writestr('word/document.xml', f'''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
<w:body>
<w:p><w:r><w:t>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</w:t></w:r></w:p>
<w:p><w:r><w:t>–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.</w:t></w:r></w:p>
<w:p><w:r><w:t>–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ</w:t></w:r></w:p>
</w:body>
</w:document>''')
                        docx.writestr('_rels/.rels', '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="word/document.xml"/>
</Relationships>''')
                        
                elif file_type == "demo" and filename.endswith('.pdf'):
                    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ PDF —Ñ–∞–π–ª
                    content = f"""%PDF-1.4
1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj
2 0 obj<</Type/Pages/Kids[3 0 R]/Count 1>>endobj
3 0 obj<</Type/Page/Parent 2 0 R/MediaBox[0 0 612 792]/Contents 4 0 R/Resources<</Font<</F1 5 0 R>>>>>>endobj
4 0 obj<</Length 80>>stream
BT/F1 12 Tf 50 750 Td(–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id})Tj 0 -20 Td(–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª)Tj ET
endstream endobj
5 0 obj<</Type/Font/Subtype/Type1/BaseFont/Helvetica>>endobj
xref 0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000274 00000 n 
0000000400 00000 n 
trailer<</Size 6/Root 1 0 R>>
startxref 467
%%EOF"""
                    with open(file_path, "w", encoding="utf-8") as f:
                        f.write(content)
                
                saved_files.append(filename)
                
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            for file in files:
                if not file.filename:
                    rejected_files.append({"filename": "unnamed_file", "reason": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞"})
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_extension = os.path.splitext(file.filename.lower())[1]
                if file_extension not in ALLOWED_EXTENSIONS:
                    rejected_files.append({
                        "filename": file.filename, 
                        "reason": f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {file_extension}"
                    })
                    continue
                
                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞
                file_content = await file.read()
                file_size = len(file_content)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if file_size > MAX_FILE_SIZE:
                    rejected_files.append({
                        "filename": file.filename, 
                        "reason": f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size / 1024 / 1024:.1f}MB (–º–∞–∫—Å–∏–º—É–º 100MB)"
                    })
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (—É–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
                safe_filename = "".join(c for c in file.filename if c.isalnum() or c in (' ', '-', '_', '.')).rstrip()
                if not safe_filename or safe_filename != file.filename:
                    safe_filename = f"file_{len(saved_files)+1}{file_extension}"
                    print(f"‚ö†Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω —Ñ–∞–π–ª {file.filename} –≤ {safe_filename} –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
                file_path = os.path.join(upload_dir, safe_filename)
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
                counter = 1
                original_safe_filename = safe_filename
                while os.path.exists(file_path):
                    name, ext = os.path.splitext(original_safe_filename)
                    safe_filename = f"{name}_{counter}{ext}"
                    file_path = os.path.join(upload_dir, safe_filename)
                    counter += 1
                
                try:
                    with open(file_path, "wb") as buffer:
                        buffer.write(file_content)
                    
                    saved_files.append(safe_filename)
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {safe_filename} ({file_size / 1024 / 1024:.1f}MB) –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                    
                except Exception as save_error:
                    rejected_files.append({
                        "filename": file.filename, 
                        "reason": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(save_error)}"
                    })
                    continue
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        supabase.table('orders').update({
            'files': json.dumps(saved_files),
            'status': 'completed',
            'updated_at': datetime.now().isoformat()
        }).eq('id', order_id).execute()
        
        print(f"üìé –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–∫–∞–∑—É {order_id}: {saved_files}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        updated_order = get_order(order_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏
        updated_order['upload_results'] = {
            "saved_files": len(saved_files),
            "rejected_files": len(rejected_files),
            "rejected_details": rejected_files
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if saved_files:
            await send_status_notification_to_user(updated_order, 'completed')
        
        return updated_order
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.get("/api/file-upload-info")
async def get_file_upload_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–∞—Ö —Ñ–∞–π–ª–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö"""
    return {
        "allowed_extensions": [
            # –î–æ–∫—É–º–µ–Ω—Ç—ã
            '.pdf', '.doc', '.docx', '.txt', '.rtf', '.odt',
            # –¢–∞–±–ª–∏—Ü—ã  
            '.xls', '.xlsx', '.csv', '.ods',
            # –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
            '.ppt', '.pptx', '.odp',
            # –ê—Ä—Ö–∏–≤—ã
            '.zip', '.rar', '.7z', '.tar', '.gz', '.bz2',
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.tiff',
            # –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥
            '.py', '.js', '.html', '.css', '.json', '.xml', '.yaml', '.yml',
            '.cpp', '.c', '.java', '.php', '.rb', '.go', '.rs', '.swift',
            # –î—Ä—É–≥–∏–µ
            '.md', '.log'
        ],
        "max_file_size_mb": 100,
        "max_file_size_bytes": 100 * 1024 * 1024,
        "telegram_max_size_mb": 50,
        "categories": {
            "documents": ['.pdf', '.doc', '.docx', '.txt', '.rtf', '.odt'],
            "spreadsheets": ['.xls', '.xlsx', '.csv', '.ods'],
            "presentations": ['.ppt', '.pptx', '.odp'],
            "archives": ['.zip', '.rar', '.7z', '.tar', '.gz', '.bz2'],
            "images": ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.tiff'],
            "code": ['.py', '.js', '.html', '.css', '.json', '.xml', '.yaml', '.yml', '.cpp', '.c', '.java', '.php', '.rb', '.go', '.rs', '.swift'],
            "other": ['.md', '.log']
        }
    }

@app.get("/api/orders/{order_id}/download/{filename}")
async def download_file(order_id: int, filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–∫–∞–∑—É"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Ñ–∞–π–ª–æ–≤
        order = supabase.table('orders').select('files').eq('id', order_id).single().execute()
        
        if not order.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        files_json = order.data.get('files')
        if not files_json:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        try:
            files = json.loads(files_json) if isinstance(files_json, str) else files_json
        except:
            files = []
        
        if filename not in files:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = os.path.join(UPLOADS_DIR, f"order_{order_id}", filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(file_path):
            raise HTTPException(status_code=404, detail=f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π media-type
        if filename.endswith('.docx'):
            media_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        elif filename.endswith('.pdf'):
            media_type = 'application/pdf'
        elif filename.endswith('.txt'):
            media_type = 'text/plain; charset=utf-8'
        elif filename.endswith('.zip'):
            media_type = 'application/zip'
        elif filename.endswith('.rar'):
            media_type = 'application/x-rar-compressed'
        elif filename.endswith('.7z'):
            media_type = 'application/x-7z-compressed'
        elif filename.endswith('.doc'):
            media_type = 'application/msword'
        elif filename.endswith('.xls'):
            media_type = 'application/vnd.ms-excel'
        elif filename.endswith('.xlsx'):
            media_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        elif filename.endswith('.ppt'):
            media_type = 'application/vnd.ms-powerpoint'
        elif filename.endswith('.pptx'):
            media_type = 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
        elif filename.endswith('.png'):
            media_type = 'image/png'
        elif filename.endswith('.jpg') or filename.endswith('.jpeg'):
            media_type = 'image/jpeg'
        elif filename.endswith('.gif'):
            media_type = 'image/gif'
        elif filename.endswith('.svg'):
            media_type = 'image/svg+xml'
        else:
            media_type = 'application/octet-stream'
        
        return FileResponse(
            path=file_path,
            filename=filename,
            media_type=media_type
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

# Utility —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
def safe_cleanup_file(filepath: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(filepath):
            os.unlink(filepath)
            print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {filepath}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filepath}: {e}")

@app.get("/api/orders/{order_id}/download-all")
async def download_all_files(order_id: int, background_tasks: BackgroundTasks):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ –≤ zip –∞—Ä—Ö–∏–≤–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Ñ–∞–π–ª–æ–≤
        order = supabase.table('orders').select('files, title').eq('id', order_id).single().execute()
        
        if not order.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        files_json = order.data.get('files')
        order_title = order.data.get('title', '–ó–∞–∫–∞–∑')
        
        if not files_json:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        try:
            files = json.loads(files_json) if isinstance(files_json, str) else files_json
        except:
            files = []
        
        if not files:
            raise HTTPException(status_code=404, detail="–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π zip —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as temp_zip:
            with zipfile.ZipFile(temp_zip.name, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                for filename in files:
                    file_path = os.path.join(UPLOADS_DIR, f"order_{order_id}", filename)
                    if os.path.exists(file_path):
                        zip_file.write(file_path, filename)
                        print(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {filename}")
                    else:
                        print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è zip —Ñ–∞–π–ª–∞
            safe_title = "".join(c for c in order_title if c.isalnum() or c in (' ', '-', '_')).rstrip()
            zip_filename = f"–ó–∞–∫–∞–∑_{order_id}_{safe_title[:30]}.zip"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—á–∏—Å—Ç–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            background_tasks.add_task(safe_cleanup_file, temp_zip.name)
            
            return FileResponse(
                path=temp_zip.name,
                filename=zip_filename,
                media_type='application/zip'
            )
            
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.post("/api/orders/{order_id}/payment-notification")
async def notify_payment(order_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = get_order(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        message = f"""
üí∞ –°—Ç—É–¥–µ–Ω—Ç –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É!

üìù –ó–∞–∫–∞–∑ #{order['id']}: {order['title']}
üë§ –°—Ç—É–¥–µ–Ω—Ç: {order['student']['name']}
üë• –ì—Ä—É–ø–ø–∞: {order['student']['group']}
üì± Telegram: {order['student']['telegram']}

üìö –ü—Ä–µ–¥–º–µ—Ç: {order['subject']['name']}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {order['description'][:200]}{'...' if len(order['description']) > 200 else ''}
‚è∞ –î–µ–¥–ª–∞–π–Ω: {order['deadline']}
üí∞ –°—É–º–º–∞: {order.get('actual_price', order['subject']['price'])} ‚ÇΩ
        """.strip()
        
        if order.get('variant_info'):
            message += f"\n\nüî¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ:\n{order['variant_info'][:300]}{'...' if len(order['variant_info']) > 300 else ''}"
        
        if order.get('input_data'):
            message += f"\n\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n{order['input_data'][:300]}{'...' if len(order['input_data']) > 300 else ''}"
        
        message += f"\n\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞!"
        message += f"\n\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        send_notification(message)
        print(f"üí∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ #{order_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
        try:
            user_telegram = order['student']['telegram']
            
            # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            student_response = supabase.table('students').select('chat_id').eq('telegram', user_telegram).limit(1).execute()
            
            if student_response.data and student_response.data[0].get('chat_id'):
                user_chat_id = student_response.data[0]['chat_id']
                
                notification_text = f"""
üí≥ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∞</b>

üìù <b>–ó–∞–∫–∞–∑ #{order['id']}:</b> {order['title']}
üìö <b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order['subject']['name']}
üí∞ <b>–°—É–º–º–∞:</b> {order.get('actual_price', order['subject']['price'])} ‚ÇΩ

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—É—á–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω.

–û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤.
                """.strip()
                
                # –°–æ–∑–¥–∞–µ–º reply keyboard
                keyboard = {
                    "keyboard": [
                        [
                            {"text": "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "web_app": {"url": f"https://bbifather.ru?telegram={user_telegram}"}},
                        ],
                        [
                            {"text": "üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"},
                            {"text": "üìã –ü—Ä–∞–≤–∏–ª–∞"}
                        ]
                    ],
                    "resize_keyboard": True,
                    "one_time_keyboard": False,
                    "input_field_placeholder": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ"
                }
                
                telegram_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                payload = {
                    'chat_id': user_chat_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id
                    'text': notification_text,
                    'parse_mode': 'HTML',
                    'reply_markup': keyboard
                }
                
                response = requests.post(telegram_url, json=payload, timeout=10)
                
                if response.status_code == 200:
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user_telegram}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ @{user_telegram}: {response.text}")
            else:
                print(f"‚ö†Ô∏è Chat ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user_telegram}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        return {"status": "notification_sent", "order_id": order_id}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

@app.post("/api/orders/{order_id}/request-revision")
async def request_order_revision(order_id: int, request: Request):
    """–ó–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    data = await request.json()
    comment = data.get('comment', '')
    grade = data.get('grade')
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å—Ç–∞—Ç—É—Å "—Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        response = supabase.table('orders').update({
            'status': 'needs_revision',
            'revision_comment': comment,
            'revision_grade': grade,
            'updated_at': datetime.now().isoformat()
        }).eq('id', order_id).execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        order = get_order(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        message = f"""
üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}

üìù –ó–∞–∫–∞–∑: {order['title']}
üë§ –°—Ç—É–¥–µ–Ω—Ç: {order['student']['name']}
üë• –ì—Ä—É–ø–ø–∞: {order['student']['group']}
üì± Telegram: {order['student']['telegram']}
üìö –ü—Ä–µ–¥–º–µ—Ç: {order['subject']['name']}
‚è∞ –î–µ–¥–ª–∞–π–Ω: {order['deadline']}

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:
{comment[:500]}{'...' if len(comment) > 500 else ''}
        """.strip()
        
        if grade:
            message += f"\n\n‚≠ê –û—Ü–µ–Ω–∫–∞ –∏–∑ Moodle: {grade}"
        
        message += f"\n\n–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        send_notification(message)
        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        updated_order = get_order(order_id)
        await send_status_notification_to_user(updated_order, 'needs_revision')
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        return updated_order
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {str(e)}")

@app.post("/api/test-notification")
async def test_notification():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        message = f"""
üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üöÄ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        """.strip()
        
        send_notification(message)
        return {"status": "success", "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return {"status": "error", "message": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)