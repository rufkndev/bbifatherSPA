import sqlite3
import json
import os
import shutil
import zipfile
import tempfile
from datetime import datetime
from typing import List, Dict, Any, Optional
from fastapi import FastAPI, HTTPException, Request, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse, FileResponse
import requests

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="Student Orders API",
    description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://bbifather.ru", "https://www.bbifather.ru", "http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ docker-compose
# –ø–æ—ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏—è load_env() –∏ –µ–µ –≤—ã–∑–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã.

# –ü—É—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–æ–∫
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ main.py —Ñ–∞–π–ª–∞ backend
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_DIR = os.path.join(BASE_DIR, "data")
UPLOADS_DIR = os.path.join(DATA_DIR, "uploads")
DATABASE_PATH = os.path.join(DATA_DIR, "database.db")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(UPLOADS_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
BOT_URL = "http://localhost:8080"

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DATABASE_PATH)
    conn.row_factory = sqlite3.Row  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ dict
    return conn

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS students (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            group_name TEXT,
            telegram TEXT,
            email TEXT,
            phone TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã students
    cursor.execute("PRAGMA table_info(students)")
    columns_info = cursor.fetchall()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ email –∏–ª–∏ phone –∏–º–µ—é—Ç NOT NULL –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    needs_migration = False
    for column in columns_info:
        column_name = column[1]  # name
        not_null = column[3]     # notnull
        if column_name in ['email', 'phone'] and not_null == 1:
            needs_migration = True
            break
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    if needs_migration:
        print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã students: —É–±–∏—Ä–∞–µ–º NOT NULL –¥–ª—è email –∏ phone")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT * FROM students")
        existing_data = cursor.fetchall()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("DROP TABLE students")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
        cursor.execute("""
            CREATE TABLE students (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                group_name TEXT,
                telegram TEXT,
                email TEXT,
                phone TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row in existing_data:
            cursor.execute("""
                INSERT INTO students (id, name, group_name, telegram, email, phone, created_at) 
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (row[0], row[1], row[2] if len(row) > 2 else None, 
                  row[3] if len(row) > 3 else None, row[4] if len(row) > 4 else None, 
                  row[5] if len(row) > 5 else None, row[6] if len(row) > 6 else None))
        
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE students ADD COLUMN group_name TEXT")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü group_name")
    except sqlite3.OperationalError:
        # –°—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass
        
    try:
        cursor.execute("ALTER TABLE students ADD COLUMN telegram TEXT")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü telegram")
    except sqlite3.OperationalError:
        # –°—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS subjects (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT,
            price REAL NOT NULL DEFAULT 0.0,
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            student_id INTEGER NOT NULL,
            subject_id INTEGER NOT NULL,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            input_data TEXT,
            variant_info TEXT,
            deadline DATE NOT NULL,
            status TEXT DEFAULT 'new',
            is_paid BOOLEAN DEFAULT 0,
            files TEXT,
            selected_works TEXT,
            is_full_course BOOLEAN DEFAULT 0,
            actual_price REAL DEFAULT 0.0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (student_id) REFERENCES students (id),
            FOREIGN KEY (subject_id) REFERENCES subjects (id)
        )
    """)
    
    # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü variant_info –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        cursor.execute("ALTER TABLE orders ADD COLUMN variant_info TEXT")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü variant_info")
    except sqlite3.OperationalError:
        # –°—Ç–æ–ª–±–µ—Ü —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        pass
        
    # –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    try:
        cursor.execute("ALTER TABLE orders ADD COLUMN selected_works TEXT")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü selected_works")
    except sqlite3.OperationalError:
        pass
        
    try:
        cursor.execute("ALTER TABLE orders ADD COLUMN is_full_course BOOLEAN DEFAULT 0")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü is_full_course")
    except sqlite3.OperationalError:
        pass
        
    try:
        cursor.execute("ALTER TABLE orders ADD COLUMN actual_price REAL DEFAULT 0.0")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü actual_price")
    except sqlite3.OperationalError:
        pass
        
    # –ú–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    try:
        cursor.execute("ALTER TABLE orders ADD COLUMN revision_comment TEXT")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü revision_comment")
    except sqlite3.OperationalError:
        pass
        
    try:
        cursor.execute("ALTER TABLE orders ADD COLUMN revision_grade TEXT")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü revision_grade")
    except sqlite3.OperationalError:
        pass
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    cursor.execute("SELECT COUNT(*) FROM subjects")
    if cursor.fetchone()[0] == 0:
        subjects = [
            ("–õ–µ—Ç–Ω—è—è –ø—Ä–∞–∫—Ç–∏–∫–∞", "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏", 2500.0),
            ("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–∞–º", 2000.0),
            ("–ü–£–ü", "–ü—Ä–∞–∫—Ç–∏–∫–∏, –ò–ö–†, —Ä–µ—Ñ–µ—Ä–∞—Ç—ã –ø–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è", 2200.0),
            ("–¶–∏—Ñ—Ä–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–µ", 1800.0),
            ("–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—é –ë–ü", 2000.0),
            ("–î—Ä—É–≥–æ–π –ø—Ä–µ–¥–º–µ—Ç", "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –¥—Ä—É–≥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É", 1500.0),
        ]
        cursor.executemany(
            "INSERT INTO subjects (name, description, price) VALUES (?, ?, ?)",
            subjects
        )
    
    conn.commit()
    conn.close()

def send_notification(endpoint: str, data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–æ—Ç—É"""
    try:
        url = f"{BOT_URL}/webhook/{endpoint}"
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {url}")
        print(f"üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {data}")
        response = requests.post(url, json=data, timeout=30)
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code != 200:
            print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        print(f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ {BOT_URL}")
        print(f"üí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ: {BOT_URL}/webhook/test")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
def startup_event():
    init_database()
    print("üöÄ Backend –∑–∞–ø—É—â–µ–Ω!")
    print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {BOT_URL}")

# API Routes
@app.get("/")
def read_root():
    return {"message": "Student Orders API is running"}

# Students endpoints
@app.get("/api/students")
def get_students():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM students ORDER BY created_at DESC")
    students = [dict(row) for row in cursor.fetchall()]
    conn.close()
    return students

@app.post("/api/students")
def create_student(request: Request):
    pass  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞

# Subjects endpoints
@app.get("/api/subjects")
def get_subjects():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM subjects WHERE is_active = 1 ORDER BY name")
    subjects = [dict(row) for row in cursor.fetchall()]
    conn.close()
    return subjects

# Orders endpoints
@app.get("/api/orders")
def get_orders(page: int = 1, limit: int = 10):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    offset = (page - 1) * limit
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    cursor.execute("""
        SELECT 
            o.*,
            s.name as student_name,
            s.group_name as student_group,
            s.telegram as student_telegram,
            sub.name as subject_name,
            sub.description as subject_description,
            sub.price as subject_price
        FROM orders o
        JOIN students s ON o.student_id = s.id
        JOIN subjects sub ON o.subject_id = sub.id
        ORDER BY o.created_at DESC
        LIMIT ? OFFSET ?
    """, (limit, offset))
    
    orders = []
    for row in cursor.fetchall():
        order = dict(row)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        order['student'] = {
            'id': order['student_id'],
            'name': order['student_name'],
            'group': order['student_group'],
            'telegram': order['student_telegram']
        }
        order['subject'] = {
            'id': order['subject_id'],
            'name': order['subject_name'],
            'description': order['subject_description'],
            'price': order['subject_price']
        }
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã
        if order['files']:
            try:
                order['files'] = json.loads(order['files'])
            except:
                order['files'] = []
        else:
            order['files'] = []
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        for key in ['student_name', 'student_group', 'student_telegram', 
                   'subject_name', 'subject_description', 'subject_price']:
            order.pop(key, None)
        
        orders.append(order)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    cursor.execute("SELECT COUNT(*) FROM orders")
    total = cursor.fetchone()[0]
    
    conn.close()
    
    return {"orders": orders, "total": total}

@app.get("/api/orders/{order_id}")
def get_order(order_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT 
            o.*,
            s.name as student_name,
            s.group_name as student_group,
            s.telegram as student_telegram,
            sub.name as subject_name,
            sub.description as subject_description,
            sub.price as subject_price
        FROM orders o
        JOIN students s ON o.student_id = s.id
        JOIN subjects sub ON o.subject_id = sub.id
        WHERE o.id = ?
    """, (order_id,))
    
    row = cursor.fetchone()
    if not row:
        conn.close()
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    order = dict(row)
    order['student'] = {
        'id': order['student_id'],
        'name': order['student_name'],
        'group': order['student_group'],
        'telegram': order['student_telegram']
    }
    order['subject'] = {
        'id': order['subject_id'],
        'name': order['subject_name'],
        'description': order['subject_description'],
        'price': order['subject_price']
    }
    
    if order['files']:
        try:
            order['files'] = json.loads(order['files'])
        except:
            order['files'] = []
    else:
        order['files'] = []
    
    conn.close()
    return order

@app.post("/api/orders")
async def create_order(request: Request):
    data = await request.json()
    
    print("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:", json.dumps(data, indent=2, ensure_ascii=False))
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'student' not in data:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        if 'subject_id' not in data:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–º–µ—Ç")
        if not data.get('title'):
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        if not data.get('deadline'):
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω –¥–µ–¥–ª–∞–π–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_data = data['student']
        cursor.execute("SELECT id FROM students WHERE telegram = ?", (student_data['telegram'],))
        student_row = cursor.fetchone()
        
        if student_row:
            student_id = student_row[0]
            print(f"üë§ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç ID: {student_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            cursor.execute(
                "UPDATE students SET name = ?, group_name = ? WHERE id = ?",
                (student_data['name'], student_data['group'], student_id)
            )
        else:
            cursor.execute(
                "INSERT INTO students (name, group_name, telegram) VALUES (?, ?, ?)",
                (student_data['name'], student_data['group'], student_data['telegram'])
            )
            student_id = cursor.lastrowid
            print(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç ID: {student_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º subject_id –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        subject_id = int(data['subject_id'])
        cursor.execute("SELECT id, name FROM subjects WHERE id = ?", (subject_id,))
        subject_row = cursor.fetchone()
        
        if not subject_row:
            raise HTTPException(status_code=400, detail=f"–ü—Ä–µ–¥–º–µ—Ç —Å ID {subject_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_row[1]} (ID: {subject_id})")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ frontend
        actual_price = data.get('actual_price', 0.0)
        selected_works_json = ""
        is_full_course = data.get('is_full_course', False)
        
        if data.get('selected_works'):
            selected_works_json = json.dumps(data['selected_works'])
            print(f"üí∞ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã: {data['selected_works']}")
        
        if is_full_course:
            print(f"üí∞ –ó–∞–∫–∞–∑ –≤—Å–µ–≥–æ –∫—É—Ä—Å–∞")
        
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {actual_price} ‚ÇΩ")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        cursor.execute("""
            INSERT INTO orders (student_id, subject_id, title, description, input_data, variant_info, deadline, selected_works, is_full_course, actual_price)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            student_id,
            subject_id,
            data['title'],
            data.get('description', ''),
            data.get('input_data', ''),
            data.get('variant_info', ''),
            data['deadline'],
            selected_works_json,
            is_full_course,
            actual_price
        ))
        
        order_id = cursor.lastrowid
        print(f"üìù –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ ID: {order_id}")
        conn.commit()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        cursor.execute("""
            SELECT 
                o.*,
                s.name as student_name,
                s.group_name as student_group,
                s.telegram as student_telegram,
                sub.name as subject_name,
                sub.description as subject_description,
                sub.price as subject_price
            FROM orders o
            JOIN students s ON o.student_id = s.id
            JOIN subjects sub ON o.subject_id = sub.id
            WHERE o.id = ?
        """, (order_id,))
        
        row = cursor.fetchone()
        order = dict(row)
        order['student'] = {
            'id': order['student_id'],
            'name': order['student_name'],
            'group': order['student_group'],
            'telegram': order['student_telegram']
        }
        order['subject'] = {
            'id': order['subject_id'],
            'name': order['subject_name'],
            'description': order['subject_description'],
            'price': order['subject_price']
        }
        order['files'] = []
        
        conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        try:
            notification_data = {
                'id': order['id'],
                'student_name': order['student']['name'],
                'student_group': order['student']['group'],
                'student_telegram': order['student']['telegram'],
                'subject_name': order['subject']['name'],
                'title': order['title'],
                'description': order['description'],
                'input_data': order['input_data'],
                'variant_info': order['variant_info'],
                'deadline': order['deadline'],
                'price': order['subject']['price']
            }
            send_notification('new_order', notification_data)
        except:
            pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
        
        return order
        
    except Exception as e:
        conn.rollback()
        conn.close()
        raise HTTPException(status_code=500, detail=str(e))

@app.patch("/api/orders/{order_id}/status")
async def update_order_status(order_id: int, request: Request):
    data = await request.json()
    status = data['status']
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "UPDATE orders SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?",
        (status, order_id)
    )
    
    if cursor.rowcount == 0:
        conn.close()
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    conn.commit()
    conn.close()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    return get_order(order_id)

@app.patch("/api/orders/{order_id}/paid")
def mark_order_as_paid(order_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute(
        "UPDATE orders SET is_paid = 1, updated_at = CURRENT_TIMESTAMP WHERE id = ?",
        (order_id,)
    )
    
    if cursor.rowcount == 0:
        conn.close()
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    conn.commit()
    conn.close()
    
    return get_order(order_id)

@app.post("/api/orders/{order_id}/files")
async def upload_order_files(order_id: int, files: list[UploadFile] = File(...)):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    cursor.execute("SELECT id, title, status FROM orders WHERE id = ?", (order_id,))
    order_data = cursor.fetchone()
    if not order_data:
        conn.close()
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞
    upload_dir = f"uploads/order_{order_id}"
    os.makedirs(upload_dir, exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    saved_files = []
    
    if not files or len(files) == 0:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ
        files_data = [
            ("completed_work.docx", "demo"),
            ("report.pdf", "demo")
        ]
        
        for filename, file_type in files_data:
            file_path = os.path.join(upload_dir, filename)
            
            if file_type == "demo" and filename.endswith('.docx'):
                # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ DOCX —Ñ–∞–π–ª
                import zipfile
                with zipfile.ZipFile(file_path, 'w') as docx:
                    docx.writestr('[Content_Types].xml', '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>
<Default Extension="xml" ContentType="application/xml"/>
<Override PartName="/word/document.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"/>
</Types>''')
                    docx.writestr('word/document.xml', f'''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
<w:body>
<w:p><w:r><w:t>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</w:t></w:r></w:p>
<w:p><w:r><w:t>–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.</w:t></w:r></w:p>
<w:p><w:r><w:t>–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ</w:t></w:r></w:p>
</w:body>
</w:document>''')
                    docx.writestr('_rels/.rels', '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="word/document.xml"/>
</Relationships>''')
                    
            elif file_type == "demo" and filename.endswith('.pdf'):
                # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ PDF —Ñ–∞–π–ª
                content = f"""%PDF-1.4
1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj
2 0 obj<</Type/Pages/Kids[3 0 R]/Count 1>>endobj
3 0 obj<</Type/Page/Parent 2 0 R/MediaBox[0 0 612 792]/Contents 4 0 R/Resources<</Font<</F1 5 0 R>>>>>>endobj
4 0 obj<</Length 80>>stream
BT/F1 12 Tf 50 750 Td(–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id})Tj 0 -20 Td(–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª)Tj ET
endstream endobj
5 0 obj<</Type/Font/Subtype/Type1/BaseFont/Helvetica>>endobj
xref 0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000274 00000 n 
0000000400 00000 n 
trailer<</Size 6/Root 1 0 R>>
startxref 467
%%EOF"""
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(content)
            
            saved_files.append(filename)
            
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file in files:
            if file.filename:
                file_path = os.path.join(upload_dir, file.filename)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
                with open(file_path, "wb") as buffer:
                    shutil.copyfileobj(file.file, buffer)
                
                saved_files.append(file.filename)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {file.filename} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute(
        "UPDATE orders SET files = ?, status = 'completed', updated_at = CURRENT_TIMESTAMP WHERE id = ?",
        (json.dumps(saved_files), order_id)
    )
    
    conn.commit()
    conn.close()
    
    print(f"üìé –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–∫–∞–∑—É {order_id}: {saved_files}")
    
    return get_order(order_id)

@app.get("/api/orders/{order_id}/download/{filename}")
async def download_file(order_id: int, filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–∫–∞–∑—É"""
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Ñ–∞–π–ª–æ–≤
    cursor.execute("SELECT files FROM orders WHERE id = ?", (order_id,))
    result = cursor.fetchone()
    conn.close()
    
    if not result:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    files_json = result[0]
    if not files_json:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    try:
        files = json.loads(files_json)
    except:
        files = []
    
    if filename not in files:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Ñ–∞–π–ª—ã –ª–µ–∂–∞–ª–∏ –±—ã –≤ –ø–∞–ø–∫–µ uploads/order_{order_id}/
    # –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    file_path = f"uploads/order_{order_id}/{filename}"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(f"uploads/order_{order_id}", exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail=f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π media-type
    if filename.endswith('.docx'):
        media_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    elif filename.endswith('.pdf'):
        media_type = 'application/pdf'
    elif filename.endswith('.txt'):
        media_type = 'text/plain; charset=utf-8'
    else:
        media_type = 'application/octet-stream'
    
    return FileResponse(
        path=file_path,
        filename=filename,
        media_type=media_type
    )

@app.get("/api/orders/{order_id}/download-all")
async def download_all_files(order_id: int):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ –≤ zip –∞—Ä—Ö–∏–≤–µ"""
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Ñ–∞–π–ª–æ–≤
    cursor.execute("SELECT files, title FROM orders WHERE id = ?", (order_id,))
    result = cursor.fetchone()
    conn.close()
    
    if not result:
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    files_json, order_title = result
    if not files_json:
        raise HTTPException(status_code=404, detail="–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    try:
        files = json.loads(files_json)
    except:
        files = []
    
    if not files:
        raise HTTPException(status_code=404, detail="–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π zip —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as temp_zip:
        with zipfile.ZipFile(temp_zip.name, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            for filename in files:
                file_path = f"uploads/order_{order_id}/{filename}"
                if os.path.exists(file_path):
                    zip_file.write(file_path, filename)
                    print(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {filename}")
                else:
                    print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è zip —Ñ–∞–π–ª–∞
        safe_title = "".join(c for c in order_title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        zip_filename = f"–ó–∞–∫–∞–∑_{order_id}_{safe_title[:30]}.zip"
        
        return FileResponse(
            path=temp_zip.name,
            filename=zip_filename,
            media_type='application/zip',
            background=lambda: os.unlink(temp_zip.name)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        )

@app.post("/api/orders/{order_id}/payment-notification")
async def notify_payment(order_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    cursor.execute("""
        SELECT 
            o.id, o.title, o.status, o.description, o.input_data, o.variant_info, o.deadline,
            s.name as student_name,
            s.group_name as student_group,
            s.telegram as student_telegram,
            sub.name as subject_name,
            sub.price as subject_price
        FROM orders o
        JOIN students s ON o.student_id = s.id
        JOIN subjects sub ON o.subject_id = sub.id
        WHERE o.id = ?
    """, (order_id,))
    
    order_data = cursor.fetchone()
    if not order_data:
        conn.close()
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    order = dict(order_data)
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    try:
        notification_data = {
            'order_id': order['id'],
            'student_name': order['student_name'],
            'student_group': order['student_group'],
            'student_telegram': order['student_telegram'],
            'subject_name': order['subject_name'],
            'title': order['title'],
            'description': order['description'],
            'input_data': order['input_data'],
            'variant_info': order['variant_info'],
            'deadline': order['deadline'],
            'price': order['subject_price']
        }
        print(f"üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notification_data}")
        send_notification('payment_notification', notification_data)
        print(f"üí∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ #{order_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")
        import traceback
        traceback.print_exc()
    
    return {"status": "notification_sent", "order_id": order_id}

@app.post("/api/orders/{order_id}/request-revision")
async def request_order_revision(order_id: int, request: Request):
    """–ó–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    data = await request.json()
    comment = data.get('comment', '')
    grade = data.get('grade')
    
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    cursor.execute("""
        SELECT 
            o.id, o.title, o.status, o.description, o.input_data, o.variant_info, o.deadline,
            s.name as student_name,
            s.group_name as student_group,
            s.telegram as student_telegram,
            sub.name as subject_name,
            sub.price as subject_price
        FROM orders o
        JOIN students s ON o.student_id = s.id
        JOIN subjects sub ON o.subject_id = sub.id
        WHERE o.id = ?
    """, (order_id,))
    
    order_data = cursor.fetchone()
    if not order_data:
        conn.close()
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    order = dict(order_data)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å—Ç–∞—Ç—É—Å "—Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    cursor.execute("""
        UPDATE orders 
        SET status = 'needs_revision', 
            revision_comment = ?, 
            revision_grade = ?, 
            updated_at = CURRENT_TIMESTAMP 
        WHERE id = ?
    """, (comment, grade, order_id))
    
    if cursor.rowcount == 0:
        conn.close()
        raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    conn.commit()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    try:
        notification_data = {
            'order_id': order_id,
            'order_title': order['title'],
            'student_name': order['student_name'],
            'student_group': order['student_group'],
            'student_telegram': order['student_telegram'],
            'subject_name': order['subject_name'],
            'comment': comment,
            'grade': grade,
            'deadline': order['deadline']
        }
        send_notification('revision_request', notification_data)
        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    return get_order(order_id)

@app.post("/api/test-bot-connection")
async def test_bot_connection():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º"""
    test_data = {
        'order_id': 999,
        'student_name': '–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤',
        'student_group': '–¢–ï–°–¢-00',
        'student_telegram': '@test_user',
        'subject_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç',
        'title': '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞',
        'description': '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã',
        'input_data': '–¢–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
        'variant_info': '–¢–µ—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç',
        'deadline': '2024-12-31',
        'price': 1000
    }
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º...")
    try:
        send_notification('payment_notification', test_data)
        return {"status": "success", "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return {"status": "error", "message": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)