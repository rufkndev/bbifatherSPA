import json
import os
import shutil
import zipfile
import tempfile
from datetime import datetime
from typing import List, Dict, Any, Optional
from fastapi import FastAPI, HTTPException, Request, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse, FileResponse
import requests
from supabase import create_client, Client
from dotenv import load_dotenv
from contextlib import asynccontextmanager

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    if init_database():
        print("üöÄ Backend –∑–∞–ø—É—â–µ–Ω —Å Supabase!")
    else:
        print("‚ö†Ô∏è Backend –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
    
    if BOT_TOKEN and BOT_CHAT_ID:
        print("üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        print("‚ö†Ô∏è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    yield
    # Shutdown
    print("üëã Backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="Student Orders API",
    description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
FRONTEND_URLS = os.getenv("FRONTEND_URLS", "http://localhost:3000").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=FRONTEND_URLS + ["https://bbifather.ru", "https://www.bbifather.ru"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
SUPABASE_URL = os.getenv("SUPABASE_URL", "")
SUPABASE_KEY = os.getenv("SUPABASE_KEY", "")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
BOT_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")

if not SUPABASE_URL or not SUPABASE_KEY:
    print("‚ö†Ô∏è SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY) if SUPABASE_URL and SUPABASE_KEY else None

# –ü—É—Ç–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥—Ä—É–∑–æ–∫
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
UPLOADS_DIR = os.path.join(BASE_DIR, "uploads")
os.makedirs(UPLOADS_DIR, exist_ok=True)

def init_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü"""
    if not supabase:
        print("‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        response = supabase.table('subjects').select('id').limit(1).execute()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
        subjects_count = supabase.table('subjects').select('id', count='exact').execute()
        if subjects_count.count == 0:
            print("‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ subjects –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ Supabase Dashboard.")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

def send_notification(message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram"""
    if not BOT_TOKEN or not BOT_CHAT_ID:
        print("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print(f"üì± –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {message}")
        return
    
    try:
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': BOT_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        print(f"üì± –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {message}")

# –°—Ç–∞—Ä—ã–π startup —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º lifespan

# API Routes
@app.get("/")
def read_root():
    return {"message": "Student Orders API is running"}

# Students endpoints
@app.get("/api/students")
def get_students():
    try:
        response = supabase.table('students').select('*').order('created_at', desc=True).execute()
        return response.data
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {str(e)}")

@app.post("/api/students")
def create_student(request: Request):
    pass  # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞

# Subjects endpoints
@app.get("/api/subjects")
def get_subjects():
    try:
        response = supabase.table('subjects').select('*').eq('is_active', True).order('name').execute()
        return response.data
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {str(e)}")

# Orders endpoints
@app.get("/api/orders")
def get_orders(page: int = 1, limit: int = 10, telegram: str = None):
    try:
        offset = (page - 1) * limit
        
        query = supabase.table('orders').select("""
            *,
            students!inner(id, name, group_name, telegram),
            subjects!inner(id, name, description, price)
        """)

        count_query = supabase.table('orders').select('id', count='exact', head=True)

        if telegram:
            clean_telegram = telegram.lstrip('@')
            
            # 1. –ù–∞–π—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ telegram
            student_response = supabase.table('students').select('id').eq('telegram', clean_telegram).limit(1).execute()
            
            if not student_response.data:
                # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                return {"orders": [], "total": 0}
                
            student_id = student_response.data[0]['id']
            
            # 2. –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ student_id
            query = query.eq('student_id', student_id)
            count_query = count_query.eq('student_id', student_id)

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        response = query.order('created_at', desc=True).range(offset, offset + limit - 1).execute()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_response = count_query.execute()
        total = total_response.count if total_response.count is not None else 0

        orders = []
        for order_data in response.data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            order = {
                **order_data,
                'student': {
                    'id': order_data['students']['id'],
                    'name': order_data['students']['name'],
                    'group': order_data['students']['group_name'],
                    'telegram': order_data['students']['telegram']
                },
                'subject': {
                    'id': order_data['subjects']['id'],
                    'name': order_data['subjects']['name'],
                    'description': order_data['subjects']['description'],
                    'price': order_data['subjects']['price']
                },
                'files': json.loads(order_data.get('files', '[]')) if isinstance(order_data.get('files'), str) else order_data.get('files', [])
            }
            del order['students']
            del order['subjects']
            orders.append(order)
        
        return {"orders": orders, "total": total}
        
    except Exception as e:
        print(f"‚ùå BACKEND: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")

@app.get("/api/orders/{order_id}")
def get_order(order_id: int):
    try:
        response = supabase.table('orders').select("""
            *,
            students!inner(id, name, group_name, telegram),
            subjects!inner(id, name, description, price)
        """).eq('id', order_id).single().execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        order = response.data
        
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª—ã
        if order.get('files'):
            try:
                order['files'] = json.loads(order['files']) if isinstance(order['files'], str) else order['files']
            except:
                order['files'] = []
        else:
            order['files'] = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        order['student'] = {
            'id': order['students']['id'],
            'name': order['students']['name'],
            'group': order['students']['group_name'],
            'telegram': order['students']['telegram']
        }
        order['subject'] = {
            'id': order['subjects']['id'],
            'name': order['subjects']['name'],
            'description': order['subjects']['description'],
            'price': order['subjects']['price']
        }
        
        # –£–¥–∞–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        del order['students']
        del order['subjects']
        
        return order
        
    except Exception as e:
        if "No rows found" in str(e):
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}")

@app.post("/api/orders")
async def create_order(request: Request):
    data = await request.json()
    
    print("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:", json.dumps(data, indent=2, ensure_ascii=False))
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'student' not in data:
            raise HTTPException(status_code=400, detail="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞")
        if 'subject_id' not in data:
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–µ–¥–º–µ—Ç")
        if not data.get('title'):
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        if not data.get('deadline'):
            raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω –¥–µ–¥–ª–∞–π–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_data = data['student']
        # –£–±–∏—Ä–∞–µ–º @ –∏–∑ –Ω–∏–∫–∞
        clean_telegram = student_data['telegram'].lstrip('@')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç
        existing_student = supabase.table('students').select('id').eq('telegram', clean_telegram).limit(1).execute()
        
        if existing_student.data and len(existing_student.data) > 0:
            student_id = existing_student.data[0]['id']
            print(f"üë§ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—É–¥–µ–Ω—Ç ID: {student_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
            supabase.table('students').update({
                'name': student_data['name'],
                'group_name': student_data['group']
            }).eq('id', student_id).execute()
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            new_student = supabase.table('students').insert({
                'name': student_data['name'],
                'group_name': student_data['group'],
                'telegram': clean_telegram
            }).execute()
            student_id = new_student.data[0]['id']
            print(f"üë§ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å—Ç—É–¥–µ–Ω—Ç ID: {student_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        subject_id = int(data['subject_id'])
        subject = supabase.table('subjects').select('id, name').eq('id', subject_id).limit(1).execute()
        
        if not subject.data or len(subject.data) == 0:
            raise HTTPException(status_code=400, detail=f"–ü—Ä–µ–¥–º–µ—Ç —Å ID {subject_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print(f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject.data[0]['name']} (ID: {subject_id})")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        actual_price = data.get('actual_price', 0.0)
        selected_works_json = json.dumps(data.get('selected_works', [])) if data.get('selected_works') else None
        is_full_course = data.get('is_full_course', False)
        
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {actual_price} ‚ÇΩ")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        new_order = supabase.table('orders').insert({
            'student_id': student_id,
            'subject_id': subject_id,
            'title': data['title'],
            'description': data.get('description', ''),
            'input_data': data.get('input_data', ''),
            'variant_info': data.get('variant_info', ''),
            'deadline': data['deadline'],
            'selected_works': selected_works_json,
            'is_full_course': is_full_course,
            'actual_price': actual_price,
            'status': 'new'
        }).execute()
        
        order_id = new_order.data[0]['id']
        print(f"üìù –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ ID: {order_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        created_order = get_order(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        try:
            message = f"""
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}

üë§ –°—Ç—É–¥–µ–Ω—Ç: {created_order['student']['name']}
üë• –ì—Ä—É–ø–ø–∞: {created_order['student']['group']}
üì± Telegram: {created_order['student']['telegram']}

üìö –ü—Ä–µ–¥–º–µ—Ç: {created_order['subject']['name']}
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {created_order['title']}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {created_order['description'][:200]}{'...' if len(created_order['description']) > 200 else ''}

‚è∞ –î–µ–¥–ª–∞–π–Ω: {created_order['deadline']}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {actual_price} ‚ÇΩ

–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """.strip()
            
            if created_order.get('variant_info'):
                message += f"\n\nüî¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ:\n{created_order['variant_info'][:300]}{'...' if len(created_order['variant_info']) > 300 else ''}"
            
            if created_order.get('input_data'):
                message += f"\n\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n{created_order['input_data'][:300]}{'...' if len(created_order['input_data']) > 300 else ''}"
            
            send_notification(message)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        return created_order
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        if "No rows found" in str(e):
            # –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            pass
        else:
            raise HTTPException(status_code=500, detail=str(e))

@app.patch("/api/orders/{order_id}/status")
async def update_order_status(order_id: int, request: Request):
    data = await request.json()
    status = data['status']
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        response = supabase.table('orders').update({
            'status': status,
            'updated_at': datetime.now().isoformat()
        }).eq('id', order_id).execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        return get_order(order_id)
        
    except Exception as e:
        if "No rows found" in str(e):
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@app.patch("/api/orders/{order_id}/paid")
def mark_order_as_paid(order_id: int):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        response = supabase.table('orders').update({
            'is_paid': True,
            'updated_at': datetime.now().isoformat()
        }).eq('id', order_id).execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return get_order(order_id)
        
    except Exception as e:
        if "No rows found" in str(e):
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã: {str(e)}")

@app.post("/api/orders/{order_id}/files")
async def upload_order_files(order_id: int, files: list[UploadFile] = File(...)):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        order_check = supabase.table('orders').select('id, title, status').eq('id', order_id).single().execute()
        if not order_check.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞
        upload_dir = os.path.join(UPLOADS_DIR, f"order_{order_id}")
        os.makedirs(upload_dir, exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        saved_files = []
        
        if not files or len(files) == 0:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ
            files_data = [
                ("completed_work.docx", "demo"),
                ("report.pdf", "demo")
            ]
            
            for filename, file_type in files_data:
                file_path = os.path.join(upload_dir, filename)
                
                if file_type == "demo" and filename.endswith('.docx'):
                    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ DOCX —Ñ–∞–π–ª
                    with zipfile.ZipFile(file_path, 'w') as docx:
                        docx.writestr('[Content_Types].xml', '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>
<Default Extension="xml" ContentType="application/xml"/>
<Override PartName="/word/document.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"/>
</Types>''')
                        docx.writestr('word/document.xml', f'''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
<w:body>
<w:p><w:r><w:t>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</w:t></w:r></w:p>
<w:p><w:r><w:t>–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª.</w:t></w:r></w:p>
<w:p><w:r><w:t>–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–æ</w:t></w:r></w:p>
</w:body>
</w:document>''')
                        docx.writestr('_rels/.rels', '''<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">
<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="word/document.xml"/>
</Relationships>''')
                        
                elif file_type == "demo" and filename.endswith('.pdf'):
                    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ PDF —Ñ–∞–π–ª
                    content = f"""%PDF-1.4
1 0 obj<</Type/Catalog/Pages 2 0 R>>endobj
2 0 obj<</Type/Pages/Kids[3 0 R]/Count 1>>endobj
3 0 obj<</Type/Page/Parent 2 0 R/MediaBox[0 0 612 792]/Contents 4 0 R/Resources<</Font<</F1 5 0 R>>>>>>endobj
4 0 obj<</Length 80>>stream
BT/F1 12 Tf 50 750 Td(–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id})Tj 0 -20 Td(–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª)Tj ET
endstream endobj
5 0 obj<</Type/Font/Subtype/Type1/BaseFont/Helvetica>>endobj
xref 0 6
0000000000 65535 f 
0000000009 00000 n 
0000000058 00000 n 
0000000115 00000 n 
0000000274 00000 n 
0000000400 00000 n 
trailer<</Size 6/Root 1 0 R>>
startxref 467
%%EOF"""
                    with open(file_path, "w", encoding="utf-8") as f:
                        f.write(content)
                
                saved_files.append(filename)
                
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for file in files:
                if file.filename:
                    file_path = os.path.join(upload_dir, file.filename)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
                    with open(file_path, "wb") as buffer:
                        shutil.copyfileobj(file.file, buffer)
                    
                    saved_files.append(file.filename)
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {file.filename} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        supabase.table('orders').update({
            'files': json.dumps(saved_files),
            'status': 'completed',
            'updated_at': datetime.now().isoformat()
        }).eq('id', order_id).execute()
        
        print(f"üìé –§–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –∑–∞–∫–∞–∑—É {order_id}: {saved_files}")
        
        return get_order(order_id)
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.get("/api/orders/{order_id}/download/{filename}")
async def download_file(order_id: int, filename: str):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ –∑–∞–∫–∞–∑—É"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Ñ–∞–π–ª–æ–≤
        order = supabase.table('orders').select('files').eq('id', order_id).single().execute()
        
        if not order.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        files_json = order.data.get('files')
        if not files_json:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        try:
            files = json.loads(files_json) if isinstance(files_json, str) else files_json
        except:
            files = []
        
        if filename not in files:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        file_path = os.path.join(UPLOADS_DIR, f"order_{order_id}", filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(file_path):
            raise HTTPException(status_code=404, detail=f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π media-type
        if filename.endswith('.docx'):
            media_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        elif filename.endswith('.pdf'):
            media_type = 'application/pdf'
        elif filename.endswith('.txt'):
            media_type = 'text/plain; charset=utf-8'
        else:
            media_type = 'application/octet-stream'
        
        return FileResponse(
            path=file_path,
            filename=filename,
            media_type=media_type
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")

@app.get("/api/orders/{order_id}/download-all")
async def download_all_files(order_id: int):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ –≤ zip –∞—Ä—Ö–∏–≤–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Ñ–∞–π–ª–æ–≤
        order = supabase.table('orders').select('files, title').eq('id', order_id).single().execute()
        
        if not order.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        files_json = order.data.get('files')
        order_title = order.data.get('title', '–ó–∞–∫–∞–∑')
        
        if not files_json:
            raise HTTPException(status_code=404, detail="–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        try:
            files = json.loads(files_json) if isinstance(files_json, str) else files_json
        except:
            files = []
        
        if not files:
            raise HTTPException(status_code=404, detail="–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π zip —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as temp_zip:
            with zipfile.ZipFile(temp_zip.name, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                for filename in files:
                    file_path = os.path.join(UPLOADS_DIR, f"order_{order_id}", filename)
                    if os.path.exists(file_path):
                        zip_file.write(file_path, filename)
                        print(f"üì¶ –î–æ–±–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {filename}")
                    else:
                        print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è zip —Ñ–∞–π–ª–∞
            safe_title = "".join(c for c in order_title if c.isalnum() or c in (' ', '-', '_')).rstrip()
            zip_filename = f"–ó–∞–∫–∞–∑_{order_id}_{safe_title[:30]}.zip"
            
            return FileResponse(
                path=temp_zip.name,
                filename=zip_filename,
                media_type='application/zip',
                background=lambda: os.unlink(temp_zip.name)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            )
            
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")

@app.post("/api/orders/{order_id}/payment-notification")
async def notify_payment(order_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = get_order(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        message = f"""
üí∞ –°—Ç—É–¥–µ–Ω—Ç –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É!

üìù –ó–∞–∫–∞–∑ #{order['id']}: {order['title']}
üë§ –°—Ç—É–¥–µ–Ω—Ç: {order['student']['name']}
üë• –ì—Ä—É–ø–ø–∞: {order['student']['group']}
üì± Telegram: {order['student']['telegram']}

üìö –ü—Ä–µ–¥–º–µ—Ç: {order['subject']['name']}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {order['description'][:200]}{'...' if len(order['description']) > 200 else ''}
‚è∞ –î–µ–¥–ª–∞–π–Ω: {order['deadline']}
üí∞ –°—É–º–º–∞: {order.get('actual_price', order['subject']['price'])} ‚ÇΩ
        """.strip()
        
        if order.get('variant_info'):
            message += f"\n\nüî¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ:\n{order['variant_info'][:300]}{'...' if len(order['variant_info']) > 300 else ''}"
        
        if order.get('input_data'):
            message += f"\n\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n{order['input_data'][:300]}{'...' if len(order['input_data']) > 300 else ''}"
        
        message += f"\n\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞!"
        message += f"\n\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        send_notification(message)
        print(f"üí∞ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ #{order_id}")
        
        return {"status": "notification_sent", "order_id": order_id}
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")

@app.post("/api/orders/{order_id}/request-revision")
async def request_order_revision(order_id: int, request: Request):
    """–ó–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    data = await request.json()
    comment = data.get('comment', '')
    grade = data.get('grade')
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ —Å—Ç–∞—Ç—É—Å "—Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        response = supabase.table('orders').update({
            'status': 'needs_revision',
            'revision_comment': comment,
            'revision_grade': grade,
            'updated_at': datetime.now().isoformat()
        }).eq('id', order_id).execute()
        
        if not response.data:
            raise HTTPException(status_code=404, detail="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        order = get_order(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        message = f"""
üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}

üìù –ó–∞–∫–∞–∑: {order['title']}
üë§ –°—Ç—É–¥–µ–Ω—Ç: {order['student']['name']}
üë• –ì—Ä—É–ø–ø–∞: {order['student']['group']}
üì± Telegram: {order['student']['telegram']}
üìö –ü—Ä–µ–¥–º–µ—Ç: {order['subject']['name']}
‚è∞ –î–µ–¥–ª–∞–π–Ω: {order['deadline']}

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:
{comment[:500]}{'...' if len(comment) > 500 else ''}
        """.strip()
        
        if grade:
            message += f"\n\n‚≠ê –û—Ü–µ–Ω–∫–∞ –∏–∑ Moodle: {grade}"
        
        message += f"\n\n–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        send_notification(message)
        print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        return get_order(order_id)
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {str(e)}")

@app.post("/api/test-notification")
async def test_notification():
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        message = f"""
üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üöÄ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        """.strip()
        
        send_notification(message)
        return {"status": "success", "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return {"status": "error", "message": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)