#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è BBI Father
–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å Web App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import os
import asyncio
import logging
import requests
from datetime import datetime
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
ADMIN_CHAT_ID = os.getenv("TELEGRAM_ADMIN_CHAT_ID", "")  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏
ADMIN_USERNAME = os.getenv("TELEGRAM_ADMIN_USERNAME", "bbifatheradmin")  # Username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
WEB_APP_URL = os.getenv("WEB_APP_URL", "https://bbifather.ru")
API_BASE_URL = os.getenv("API_BASE_URL", "https://bbifather.ru/api")  # URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤

if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!")

class BBIFatherBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("rules", self.rules_command))
        self.app.add_handler(CommandHandler("support", self.support_command))
        self.app.add_handler(CommandHandler("download", self.download_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–í–ê–ñ–ù–û: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º —Å—Ä–µ–¥–∏ CallbackQuery!)
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info("üîß –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>BBI Father</b> - —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç!

üéì –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤  
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –ø—Ä—è–º–æ –≤ Telegram

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
        """
        
        keyboard = self.get_main_keyboard(user.username)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É BBI Father</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/rules - –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/support - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–∞–±–æ—Ç—ã
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
4Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—É—é —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–ù–∞–∂–º–∏—Ç–µ "üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞" –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        """
        
        keyboard = self.get_main_keyboard(update.effective_user.username)
        
        await update.message.reply_text(
            help_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    async def rules_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rules"""
        await self.send_rules(update, context)

    async def support_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /support"""
        await self.handle_support_request(update, context)

    def get_main_keyboard(self, username: Optional[str] = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=f"{WEB_APP_URL}?telegram={username or 'user'}")
                )
            ],
            [
                InlineKeyboardButton("üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
                InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")
            ],
            [
                InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help"),
                InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã", callback_data="download")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        user = update.effective_user
        
        logger.info(f"üîò CALLBACK –ü–û–õ–£–ß–ï–ù! –ö–Ω–æ–ø–∫–∞: {query.data} –æ—Ç {user.username or user.first_name}")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        try:
            await query.answer()
            logger.info(f"‚úÖ Callback query answered –¥–ª—è {query.data}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback: {e}")
            return
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            if query.data == "rules":
                logger.info("üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–ü—Ä–∞–≤–∏–ª–∞'")
                await query.edit_message_text(
                    "üìã <b>–ü—Ä–∞–≤–∏–ª–∞ BBI Father</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª.\n–ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                    ]])
                )
            elif query.data == "support":
                logger.info("üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞'")
                await query.edit_message_text(
                    f"üí¨ <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º: @{ADMIN_USERNAME}",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton(f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å @{ADMIN_USERNAME}", url=f"https://t.me/{ADMIN_USERNAME}")
                    ], [
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                    ]])
                )
            elif query.data == "help":
                logger.info("‚ÑπÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–°–ø—Ä–∞–≤–∫–∞'")
                await query.edit_message_text(
                    "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n–≠—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n–ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                    ]])
                )
            elif query.data == "download":
                logger.info("üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É '–°–∫–∞—á–∞—Ç—å'")
                await query.edit_message_text(
                    "üì• <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤</b>\n\n–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n–ö–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                    parse_mode='HTML',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
                    ]])
                )
            elif query.data == "back_to_menu":
                logger.info("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                user = update.effective_user
                welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>BBI Father</b> - —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç!

üéì –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤  
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –ø—Ä—è–º–æ –≤ Telegram

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
                """.strip()
                
                keyboard = self.get_main_keyboard(user.username)
                await query.edit_message_text(welcome_text, reply_markup=keyboard, parse_mode='HTML')
            else:
                logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}")
                await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ button_callback: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            try:
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass

    async def send_rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE, edit: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º"""
        rules_text = """
üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è BBI Father</b>

<b>üéØ –ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º:</b>
‚úÖ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
‚úÖ –ö—É—Ä—Å–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É

<b>‚è∞ –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–∞–±–∞: 1-3 –¥–Ω—è
‚Ä¢ –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞: 5-7 –¥–Ω–µ–π
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã: +50% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

<b>üí∞ –û–ø–ª–∞—Ç–∞:</b>
‚Ä¢ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 100%
‚Ä¢ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ
‚Ä¢ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–æ—Ç–µ

<b>üìù –ì–∞—Ä–∞–Ω—Ç–∏–∏:</b>
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞–≥–∏–∞—Ç
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–¥–µ

<b>üö´ –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º:</b>
‚ùå –≠–∫–∑–∞–º–µ–Ω—ã –∏ –∑–∞—á–µ—Ç—ã –æ–Ω–ª–∞–π–Ω
‚ùå –ù–∞–ø–∏—Å–∞–Ω–∏–µ –¥–∏–ø–ª–æ–º–Ω—ã—Ö —Ä–∞–±–æ—Ç
‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª

<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00 MSK
        """
        
        back_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        if edit and update.callback_query:
            await update.callback_query.edit_message_text(
                rules_text,
                reply_markup=back_keyboard,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                rules_text,
                reply_markup=back_keyboard,
                parse_mode='HTML'
            )

    async def handle_support_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE, edit: bool = False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω—É"""
        user = update.effective_user
        
        support_text = f"""
üí¨ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é.

<b>–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç —Å:</b>
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
‚Ä¢ –í–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º  
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤

<b>‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –æ–±—ã—á–Ω–æ –¥–æ 1 —á–∞—Å–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üëá
        """
        
        keyboard = [
            [InlineKeyboardButton(
                f"‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å @{ADMIN_USERNAME}",
                url=f"https://t.me/{ADMIN_USERNAME}"
            )],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        support_keyboard = InlineKeyboardMarkup(keyboard)
        
        if edit and update.callback_query:
            await update.callback_query.edit_message_text(
                support_text,
                reply_markup=support_keyboard,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                support_text,
                reply_markup=support_keyboard,
                parse_mode='HTML'
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if context.user_data.get('waiting_for_support'):
            await self.forward_to_support(update, context)
            context.user_data['waiting_for_support'] = False
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=self.get_main_keyboard(user.username)
            )

    async def forward_to_support(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        user = update.effective_user
        message_text = update.message.text
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=self.get_main_keyboard(user.username)
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–µ—Å–ª–∏ ID –∑–∞–¥–∞–Ω)
        if ADMIN_CHAT_ID:
            admin_message = f"""
üÜò <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}
üÜî <b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üì± <b>Telegram ID:</b> <code>{user.id}</code>
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message_text}
            """
            
            try:
                await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=admin_message,
                    parse_mode='HTML'
                )
                logger.info(f"Support message forwarded to admin from user {user.id}")
            except Exception as e:
                logger.error(f"Failed to forward message to admin: {e}")

    async def back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        main_text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é BBI Father</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üì± <b>–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> - —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å
üìã <b>–ü—Ä–∞–≤–∏–ª–∞</b> - –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–∞–±–æ—Ç—ã  
üí¨ <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        """
        
        keyboard = self.get_main_keyboard(user.username)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                main_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

    async def send_user_guide(self, update: Update, context: ContextTypes.DEFAULT_TYPE, edit: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞"""
        guide_text = """
‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ BBI Father</b>

<b>üìã –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –≤–µ—Å—å –∫—É—Ä—Å
4Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑

<b>üí∞ –ü—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª" –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
‚Ä¢ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã

<b>üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:</b>
‚Ä¢ <b>–ù–æ–≤—ã–π</b> - –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω
‚Ä¢ <b>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b> - –∂–¥–µ–º –≤–∞—à—É –æ–ø–ª–∞—Ç—É
‚Ä¢ <b>–û–ø–ª–∞—á–µ–Ω</b> - –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
‚Ä¢ <b>–í —Ä–∞–±–æ—Ç–µ</b> - –º—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–∫–∞–∑
‚Ä¢ <b>–í—ã–ø–æ–ª–Ω–µ–Ω</b> - —Ä–∞–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é

<b>üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:</b>
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ—è–≤—è—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
‚Ä¢ –í—ã —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª—ã –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é

<b>üîÑ –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –≥–æ—Ç–æ–≤—É—é —Ä–∞–±–æ—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ù—É–∂–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
‚Ä¢ –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ

<b>üí¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
        """
        
        back_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        if edit and update.callback_query:
            await update.callback_query.edit_message_text(
                guide_text,
                reply_markup=back_keyboard,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                guide_text,
                reply_markup=back_keyboard,
                parse_mode='HTML'
            )

    async def handle_download_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
        user = update.effective_user
        user_telegram = user.username
        
        if not user_telegram:
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω username –≤ Telegram!")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≥–æ—Ç–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
            response = requests.get(
                f"{API_BASE_URL}/orders",
                params={'telegram': user_telegram, 'limit': 50}
            )
            
            if response.status_code == 200:
                data = response.json()
                orders_with_files = [
                    order for order in data['orders'] 
                    if order.get('status') == 'completed' and order.get('files')
                ]
                
                if not orders_with_files:
                    await update.callback_query.edit_message_text(
                        "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n\n"
                        "–ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                        ])
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
                keyboard = []
                for order in orders_with_files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–∫–∞–∑–æ–≤
                    keyboard.append([InlineKeyboardButton(
                        f"üì• {order['title'][:30]}... (#{order['id']})",
                        callback_data=f"download_{order['id']}"
                    )])
                
                keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
                
                await update.callback_query.edit_message_text(
                    f"üì• <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã:</b>\n\n"
                    f"–ù–∞–π–¥–µ–Ω–æ {len(orders_with_files)} –≥–æ—Ç–æ–≤—ã—Ö —Ä–∞–±–æ—Ç.\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='HTML'
                )
            else:
                await update.callback_query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ])
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )

    async def download_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /download –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        await self.handle_download_request(update, context)

    async def send_order_files(self, update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            response = requests.get(f"{API_BASE_URL}/orders/{order_id}")
            
            if response.status_code != 200:
                await update.callback_query.edit_message_text(
                    "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ])
                )
                return
            
            order = response.json()
            files = order.get('files', [])
            
            if not files:
                await update.callback_query.edit_message_text(
                    f"üì≠ –í –∑–∞–∫–∞–∑–µ #{order_id} –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                    ])
                )
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
            await update.callback_query.edit_message_text(
                f"üì§ <b>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n\n"
                f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order['title']}\n"
                f"üìÅ <b>–§–∞–π–ª–æ–≤:</b> {len(files)}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            files_sent = 0
            for filename in files:
                try:
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
                    file_response = requests.get(
                        f"{API_BASE_URL}/orders/{order_id}/download/{filename}",
                        stream=True
                    )
                    
                    if file_response.status_code == 200:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await context.bot.send_document(
                            chat_id=update.effective_user.id,
                            document=file_response.content,
                            filename=filename,
                            caption=f"üìé –§–∞–π–ª –∏–∑ –∑–∞–∫–∞–∑–∞ #{order_id}: {order['title']}"
                        )
                        files_sent += 1
                        
                except Exception as file_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {filename}: {file_error}")
                    await context.bot.send_message(
                        chat_id=update.effective_user.id,
                        text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {filename}"
                    )
            
            # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if files_sent > 0:
                final_message = (
                    f"‚úÖ <b>–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!</b>\n\n"
                    f"üìù <b>–ó–∞–∫–∞–∑:</b> #{order_id} - {order['title']}\n"
                    f"üìÅ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:</b> {files_sent} –∏–∑ {len(files)}\n\n"
                    f"–í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —á–∞—Ç–µ –≤—ã—à–µ üëÜ"
                )
            else:
                final_message = (
                    f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã</b>\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
            
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=final_message,
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ])
            )

    @staticmethod
    async def send_status_notification(user_telegram: str, order_id: int, status: str, order_title: str):
        """–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            status_messages = {
                'paid': 'üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.',
                'in_progress': '‚öôÔ∏è –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ú—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.',
                'completed': '‚úÖ –†–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –±–æ—Ç–µ.',
                'needs_revision': 'üîÑ –¢—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.',
            }
            
            status_message = status_messages.get(status)
            if not status_message:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ username
            bot_token = BOT_TOKEN
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ getUpdates –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º username –Ω–∞–ø—Ä—è–º—É—é
            message_text = f"""
üîî <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}</b>

üìù <b>–ó–∞–∫–∞–∑:</b> {order_title}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_message}

–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –±–æ—Ç–µ üëá

–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é
            """.strip()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
            url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
            
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ username (–µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —É–±–∏—Ä–∞–µ–º –µ–≥–æ)
            clean_username = user_telegram.lstrip('@')
            
            payload = {
                'chat_id': f'@{clean_username}',
                'text': message_text,
                'parse_mode': 'HTML'
            }
            
            response = requests.post(url, json=payload, timeout=10)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{clean_username}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ @{clean_username}: {response.text}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram}: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ BBI Father Telegram Bot...")
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            self.app.run_polling(drop_pending_updates=True)
        except KeyboardInterrupt:
            logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BBI Father Telegram Bot...")
        bot = BBIFatherBot()
        logger.info("ü§ñ BBI Father Telegram Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ handlers
        handlers = bot.app.handlers
        logger.info(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ handlers: {len(handlers[0])} –≤ –≥—Ä—É–ø–ø–µ 0")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")


if __name__ == "__main__":
    main()
