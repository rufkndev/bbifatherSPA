#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è BBI Father
–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å Web App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import os
import asyncio
import logging
from datetime import datetime
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
ADMIN_CHAT_ID = os.getenv("TELEGRAM_ADMIN_CHAT_ID", "")  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏
WEB_APP_URL = os.getenv("WEB_APP_URL", "https://bbifather.ru")

if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!")

class BBIFatherBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("rules", self.rules_command))
        self.app.add_handler(CommandHandler("support", self.support_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        self.app.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>BBI Father</b> - —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç!

üéì –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤  
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –ø—Ä—è–º–æ –≤ Telegram

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
        """
        
        keyboard = self.get_main_keyboard(user.username)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É BBI Father</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/rules - –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/support - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Å –¥–µ—Ç–∞–ª—è–º–∏ —Ä–∞–±–æ—Ç—ã
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞
4Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –≥–æ—Ç–æ–≤—É—é —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

<b>–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</b>
–ù–∞–∂–º–∏—Ç–µ "üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞" –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        """
        
        keyboard = self.get_main_keyboard(update.effective_user.username)
        
        await update.message.reply_text(
            help_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )

    async def rules_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rules"""
        await self.send_rules(update, context)

    async def support_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /support"""
        await self.handle_support_request(update, context)

    def get_main_keyboard(self, username: Optional[str] = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=f"{WEB_APP_URL}?telegram={username or 'user'}")
                )
            ],
            [
                InlineKeyboardButton("üìã –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules"),
                InlineKeyboardButton("üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
            ],
            [
                InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "rules":
            await self.send_rules(update, context, edit=True)
        elif query.data == "support":
            await self.handle_support_request(update, context, edit=True)
        elif query.data == "help":
            await self.help_command(update, context)
        elif query.data == "back_to_menu":
            await self.back_to_main_menu(update, context)

    async def send_rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE, edit: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º"""
        rules_text = """
üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è BBI Father</b>

<b>üéØ –ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º:</b>
‚úÖ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é
‚úÖ –ö—É—Ä—Å–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É

<b>‚è∞ –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b>
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–∞–±–∞: 1-3 –¥–Ω—è
‚Ä¢ –ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞: 5-7 –¥–Ω–µ–π
‚Ä¢ –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã: +50% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

<b>üí∞ –û–ø–ª–∞—Ç–∞:</b>
‚Ä¢ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 100%
‚Ä¢ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ
‚Ä¢ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–æ—Ç–µ

<b>üìù –ì–∞—Ä–∞–Ω—Ç–∏–∏:</b>
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞–≥–∏–∞—Ç
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–¥–µ

<b>üö´ –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ–º:</b>
‚ùå –≠–∫–∑–∞–º–µ–Ω—ã –∏ –∑–∞—á–µ—Ç—ã –æ–Ω–ª–∞–π–Ω
‚ùå –ù–∞–ø–∏—Å–∞–Ω–∏–µ –¥–∏–ø–ª–æ–º–Ω—ã—Ö —Ä–∞–±–æ—Ç
‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª

<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00 MSK
        """
        
        back_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        if edit and update.callback_query:
            await update.callback_query.edit_message_text(
                rules_text,
                reply_markup=back_keyboard,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                rules_text,
                reply_markup=back_keyboard,
                parse_mode='HTML'
            )

    async def handle_support_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE, edit: bool = False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É"""
        user = update.effective_user
        
        support_text = f"""
üí¨ <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–ø–∏—à–∏—Ç–µ –∏—Ö –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

<b>–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ–∂–µ—Ç —Å:</b>
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
‚Ä¢ –í–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º  
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤

<b>‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –æ–±—ã—á–Ω–æ –¥–æ 1 —á–∞—Å–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üëá
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        context.user_data['waiting_for_support'] = True
        
        back_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        if edit and update.callback_query:
            await update.callback_query.edit_message_text(
                support_text,
                reply_markup=back_keyboard,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(
                support_text,
                reply_markup=back_keyboard,
                parse_mode='HTML'
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        if context.user_data.get('waiting_for_support'):
            await self.forward_to_support(update, context)
            context.user_data['waiting_for_support'] = False
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=self.get_main_keyboard(user.username)
            )

    async def forward_to_support(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        user = update.effective_user
        message_text = update.message.text
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n"
            "–ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=self.get_main_keyboard(user.username)
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–µ—Å–ª–∏ ID –∑–∞–¥–∞–Ω)
        if ADMIN_CHAT_ID:
            admin_message = f"""
üÜò <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.full_name}
üÜî <b>Username:</b> @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üì± <b>Telegram ID:</b> <code>{user.id}</code>
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{message_text}
            """
            
            try:
                await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=admin_message,
                    parse_mode='HTML'
                )
                logger.info(f"Support message forwarded to admin from user {user.id}")
            except Exception as e:
                logger.error(f"Failed to forward message to admin: {e}")

    async def back_to_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        main_text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é BBI Father</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:

üì± <b>–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> - —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å
üìã <b>–ü—Ä–∞–≤–∏–ª–∞</b> - –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–∞–±–æ—Ç—ã  
üí¨ <b>–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞</b> - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        """
        
        keyboard = self.get_main_keyboard(user.username)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                main_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ BBI Father Telegram Bot...")
        self.app.run_polling(drop_pending_updates=True)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = BBIFatherBot()
        logger.info("ü§ñ BBI Father Telegram Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")


if __name__ == "__main__":
    main()
