#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import os
import sys
import json
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading
import time

def load_env():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
    if os.path.exists(env_path):
        print(f"üìÑ –ß–∏—Ç–∞—é .env –∏–∑: {env_path}")
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        print("‚úÖ .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
    else:
        print(f"‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_env()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "")
PORT = 8080

class NotificationHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        try:
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data.decode('utf-8'))
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –æ—Ç–≤–µ—Ç –±—ã—Å—Ç—Ä–æ
            try:
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b'OK')
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            
            # –ü–æ—Ç–æ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            print(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {self.path}")
            print(f"üîç –î–∞–Ω–Ω—ã–µ webhook: {json.dumps(data, indent=2, ensure_ascii=False)}")
            
            if self.path == '/webhook/new_order':
                self.handle_new_order(data)
            elif self.path == '/webhook/status_change':
                self.handle_status_change(data)
            elif self.path == '/webhook/payment':
                self.handle_payment(data)
            elif self.path == '/webhook/payment_notification':
                print("üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ")
                self.handle_payment_notification(data)
            elif self.path == '/webhook/revision_request':
                print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
                self.handle_revision_request(data)
            elif self.path == '/webhook/test':
                print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π webhook")
                self.handle_test()
            else:
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π webhook: {self.path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            import traceback
            traceback.print_exc()
            try:
                self.send_response(500)
                self.end_headers()
                self.wfile.write(b'Error')
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.path == '/webhook/test' or self.path == '/' or self.path == '/status':
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            response = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>StudyOrders Bot Status</title>
    <style>
        body {{ font-family: Arial; margin: 20px; }}
        .status {{ color: green; }}
        .error {{ color: red; }}
        button {{ padding: 10px; margin: 5px; }}
    </style>
</head>
<body>
    <h1>ü§ñ StudyOrders Notification Bot</h1>
    <p class="status">‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}</p>
    <h2>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</h2>
    <ul>
        <li>BOT_TOKEN: {'<span class="status">‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>' if BOT_TOKEN else '<span class="error">‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>'}</li>
        <li>CHAT_ID: {'<span class="status">‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>' if CHAT_ID else '<span class="error">‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</span>'}</li>
        <li>PORT: {PORT}</li>
    </ul>
    
    <h2>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
    <button onclick="testNotification()">üß™ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</button>
    <button onclick="testRevision()">üîÑ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö</button>
    
    <div id="result"></div>
    
    <script>
    function testNotification() {{
        fetch('/webhook/test', {{
            method: 'POST',
            headers: {{'Content-Type': 'application/json'}},
            body: JSON.stringify({{test: true, timestamp: new Date().toISOString()}})
        }}).then(response => {{
            document.getElementById('result').innerHTML = '<p class="status">‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</p>';
        }}).catch(err => {{
            document.getElementById('result').innerHTML = '<p class="error">‚ùå –û—à–∏–±–∫–∞: ' + err + '</p>';
        }});
    }}
    
    function testRevision() {{
        fetch('/webhook/revision_request', {{
            method: 'POST',
            headers: {{'Content-Type': 'application/json'}},
            body: JSON.stringify({{
                order_id: 999,
                order_title: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞',
                student_name: '–¢–µ—Å—Ç–æ–≤—ã–π –°—Ç—É–¥–µ–Ω—Ç',
                student_group: '–¢–ï–°–¢-00',
                student_telegram: '@test_user',
                subject_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç',
                comment: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö',
                grade: '4.5',
                deadline: '2024-12-31'
            }})
        }}).then(response => {{
            document.getElementById('result').innerHTML = '<p class="status">‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</p>';
        }}).catch(err => {{
            document.getElementById('result').innerHTML = '<p class="error">‚ùå –û—à–∏–±–∫–∞: ' + err + '</p>';
        }});
    }}
    </script>
</body>
</html>
            """.encode('utf-8')
            self.wfile.write(response)
        else:
            self.send_response(404)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'404 Not Found')
    
    def handle_new_order(self, data):
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        variant_info = data.get('variant_info', '').strip()
        input_data = data.get('input_data', '').strip()
        
        message = f"""
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{data.get('id', 'N/A')}

üë§ –°—Ç—É–¥–µ–Ω—Ç: {data.get('student_name', 'N/A')}
üë• –ì—Ä—É–ø–ø–∞: {data.get('student_group', 'N/A')}
üì± Telegram: {data.get('student_telegram', 'N/A')}

üìö –ü—Ä–µ–¥–º–µ—Ç: {data.get('subject_name', 'N/A')}
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title', 'N/A')}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', 'N/A')[:200]}{'...' if len(data.get('description', '')) > 200 else ''}

‚è∞ –î–µ–¥–ª–∞–π–Ω: {data.get('deadline', 'N/A')}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data.get('price', 'N/A')} —Ä—É–±.
        """.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if variant_info:
            message += f"\n\nüî¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ:\n{variant_info[:300]}{'...' if len(variant_info) > 300 else ''}"
        
        if input_data:
            message += f"\n\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n{input_data[:300]}{'...' if len(input_data) > 300 else ''}"
        
        message += f"\n\n–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        self.send_notification(message)
    
    def handle_status_change(self, data):
        status_names = {
            'new': '–ù–æ–≤—ã–π',
            'waiting_payment': '–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã',
            'paid': '–û–ø–ª–∞—á–µ–Ω', 
            'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω'
        }
        
        old_status = status_names.get(data.get('old_status'), data.get('old_status'))
        new_status = status_names.get(data.get('new_status'), data.get('new_status'))
        
        message = f"""
üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{data.get('order_data', {}).get('id', 'N/A')}

üìù –ó–∞–∫–∞–∑: {data.get('order_data', {}).get('title', 'N/A')}
üë§ –°—Ç—É–¥–µ–Ω—Ç: {data.get('order_data', {}).get('student_name', 'N/A')}

–ë—ã–ª–æ: {old_status}
–°—Ç–∞–ª–æ: {new_status}

–ò–∑–º–µ–Ω–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """.strip()
        
        self.send_notification(message)
    
    def handle_payment(self, data):
        message = f"""
üí≥ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω!

üìù –ó–∞–∫–∞–∑ #{data.get('id', 'N/A')}: {data.get('title', 'N/A')}
üë§ –°—Ç—É–¥–µ–Ω—Ç: {data.get('student_name', 'N/A')}
üí∞ –°—É–º–º–∞: {data.get('price', 'N/A')} —Ä—É–±.

–û–ø–ª–∞—á–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """.strip()
        
        self.send_notification(message)
    
    def handle_payment_notification(self, data):
        print(f"üí∞ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ")
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        variant_info = data.get('variant_info', '').strip()
        input_data = data.get('input_data', '').strip()
        
        message = f"""
üí∞ –°—Ç—É–¥–µ–Ω—Ç –æ—Ç–º–µ—Ç–∏–ª –æ–ø–ª–∞—Ç—É!

üìù –ó–∞–∫–∞–∑ #{data.get('order_id', 'N/A')}: {data.get('title', 'N/A')}
üë§ –°—Ç—É–¥–µ–Ω—Ç: {data.get('student_name', 'N/A')}
üë• –ì—Ä—É–ø–ø–∞: {data.get('student_group', 'N/A')}
üì± Telegram: {data.get('student_telegram', 'N/A')}

üìö –ü—Ä–µ–¥–º–µ—Ç: {data.get('subject_name', 'N/A')}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', 'N/A')[:200]}{'...' if len(data.get('description', '')) > 200 else ''}
‚è∞ –î–µ–¥–ª–∞–π–Ω: {data.get('deadline', 'N/A')}
üí∞ –°—É–º–º–∞: {data.get('price', 'N/A')} —Ä—É–±.
        """.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if variant_info:
            message += f"\n\nüî¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ:\n{variant_info[:300]}{'...' if len(variant_info) > 300 else ''}"
        
        if input_data:
            message += f"\n\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n{input_data[:300]}{'...' if len(input_data) > 300 else ''}"
        
        message += f"\n\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞!"
        message += f"\n\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        print(f"üìù –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n{message}")
        print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...")
        
        self.send_notification(message)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def send_notification(self, message):
        print("=" * 50)
        print("üì± –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:")
        print(message)
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        print(f"üîç BOT_TOKEN: {'‚úÖ –µ—Å—Ç—å' if BOT_TOKEN else '‚ùå –Ω–µ—Ç'}")
        print(f"üîç CHAT_ID: {'‚úÖ –µ—Å—Ç—å' if CHAT_ID else '‚ùå –Ω–µ—Ç'}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if BOT_TOKEN and CHAT_ID:
            try:
                import requests
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                payload = {
                    'chat_id': CHAT_ID,
                    'text': message,
                    'parse_mode': 'HTML'
                }
                print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram: {url}")
                response = requests.post(url, data=payload, timeout=10)
                print(f"üì§ –û—Ç–≤–µ—Ç Telegram API: {response.status_code}")
                if response.status_code == 200:
                    print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                else:
                    print(f"‚ùå Telegram –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.text}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
                import traceback
                traceback.print_exc()
        else:
            print("‚ö†Ô∏è Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª–∏")
            if not BOT_TOKEN:
                print("   üìù –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª")
            if not CHAT_ID:
                print("   üìù –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_CHAT_ID –≤ .env —Ñ–∞–π–ª")
    
    def handle_revision_request(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        print(f"üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
        
        order_id = data.get('order_id', 'N/A')
        order_title = data.get('order_title', 'N/A')
        student_name = data.get('student_name', 'N/A')
        student_group = data.get('student_group', 'N/A')
        student_telegram = data.get('student_telegram', 'N/A')
        subject_name = data.get('subject_name', 'N/A')
        comment = data.get('comment', '')
        grade = data.get('grade')
        deadline = data.get('deadline', 'N/A')
        
        message = f"""
üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}

üìù –ó–∞–∫–∞–∑: {order_title}
üë§ –°—Ç—É–¥–µ–Ω—Ç: {student_name}
üë• –ì—Ä—É–ø–ø–∞: {student_group}
üì± Telegram: {student_telegram}
üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_name}
‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline}

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:
{comment[:500]}{'...' if len(comment) > 500 else ''}
        """.strip()
        
        if grade:
            message += f"\n\n‚≠ê –û—Ü–µ–Ω–∫–∞ –∏–∑ Moodle: {grade}"
        
        message += f"\n\n–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        self.send_notification(message)
    
    def handle_test(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        print("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω")
        message = f"üß™ –¢–µ—Å—Ç –±–æ—Ç–∞ - {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        self.send_notification(message)

def run_server():
    """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è webhook'–æ–≤"""
    server_address = ('', PORT)
    httpd = HTTPServer(server_address, NotificationHandler)
    print(f"ü§ñ –ë–æ—Ç-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    print("üì± –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if BOT_TOKEN and CHAT_ID:
        print(f"‚úÖ Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
        print(f"   üì± –¢–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...{BOT_TOKEN[-5:] if len(BOT_TOKEN) > 15 else BOT_TOKEN}")
        print(f"   üí¨ Chat ID: {CHAT_ID}")
        print("   üöÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ Telegram!")
    elif BOT_TOKEN:
        print("‚ö†Ô∏è  –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω CHAT_ID")
        print("   –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_CHAT_ID –≤ .env —Ñ–∞–π–ª")
    elif CHAT_ID:
        print("‚ö†Ô∏è  Chat ID –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
        print("   –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª") 
    else:
        print("‚ö†Ô∏è  Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª–∏")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
    
    print("-" * 50)
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        httpd.shutdown()

if __name__ == "__main__":
    run_server()